{"abstract":[{"type":"text","text":"A property wrapper that represents a command-line flag."}],"topicSections":[{"identifiers":["doc:\/\/swift-argument-parser.ArgumentParser\/documentation\/ArgumentParser\/Flag\/init(wrappedValue:name:help:)"],"title":"Boolean Flags","anchor":"Boolean-Flags"},{"title":"Boolean Flags with Inversions","anchor":"Boolean-Flags-with-Inversions","identifiers":["doc:\/\/swift-argument-parser.ArgumentParser\/documentation\/ArgumentParser\/Flag\/init(wrappedValue:name:inversion:exclusivity:help:)","doc:\/\/swift-argument-parser.ArgumentParser\/documentation\/ArgumentParser\/Flag\/init(name:inversion:exclusivity:help:)-12okg","doc:\/\/swift-argument-parser.ArgumentParser\/documentation\/ArgumentParser\/Flag\/init(name:inversion:exclusivity:help:)-1h8f7","doc:\/\/swift-argument-parser.ArgumentParser\/documentation\/ArgumentParser\/FlagInversion"]},{"identifiers":["doc:\/\/swift-argument-parser.ArgumentParser\/documentation\/ArgumentParser\/Flag\/init(name:help:)"],"title":"Counted Flags","anchor":"Counted-Flags"},{"title":"Custom Enumerable Flags","identifiers":["doc:\/\/swift-argument-parser.ArgumentParser\/documentation\/ArgumentParser\/Flag\/init(help:)","doc:\/\/swift-argument-parser.ArgumentParser\/documentation\/ArgumentParser\/Flag\/init(exclusivity:help:)-38n7u","doc:\/\/swift-argument-parser.ArgumentParser\/documentation\/ArgumentParser\/Flag\/init(exclusivity:help:)-5fggj","doc:\/\/swift-argument-parser.ArgumentParser\/documentation\/ArgumentParser\/Flag\/init(wrappedValue:exclusivity:help:)","doc:\/\/swift-argument-parser.ArgumentParser\/documentation\/ArgumentParser\/Flag\/init(wrappedValue:help:)"],"anchor":"Custom-Enumerable-Flags"},{"identifiers":["doc:\/\/swift-argument-parser.ArgumentParser\/documentation\/ArgumentParser\/Flag\/wrappedValue"],"title":"Infrequently Used APIs","anchor":"Infrequently-Used-APIs"},{"title":"Supporting Types","identifiers":["doc:\/\/swift-argument-parser.ArgumentParser\/documentation\/ArgumentParser\/FlagExclusivity"],"anchor":"Supporting-Types"},{"anchor":"Default-Implementations","generated":true,"title":"Default Implementations","identifiers":["doc:\/\/swift-argument-parser.ArgumentParser\/documentation\/ArgumentParser\/Flag\/CustomStringConvertible-Implementations"]}],"primaryContentSections":[{"declarations":[{"tokens":[{"text":"@propertyWrapper","kind":"attribute"},{"text":" ","kind":"text"},{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Flag"},{"kind":"text","text":"<"},{"text":"Value","kind":"genericParameter"},{"text":">","kind":"text"}],"platforms":["macOS"],"languages":["swift"]}],"kind":"declarations"},{"content":[{"text":"Overview","type":"heading","anchor":"overview","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"Use the "},{"code":"@Flag","type":"codeVoice"},{"text":" wrapper to define a property of your custom type as a","type":"text"},{"text":" ","type":"text"},{"text":"command-line flag. A ","type":"text"},{"inlineContent":[{"text":"flag","type":"text"}],"type":"emphasis"},{"type":"text","text":" is a dash-prefixed label that can be provided on"},{"type":"text","text":" "},{"text":"the command line, such as ","type":"text"},{"type":"codeVoice","code":"-d"},{"text":" and ","type":"text"},{"code":"--debug","type":"codeVoice"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"text":"For example, the following program declares a flag that lets a user indicate","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"that seconds should be included when printing the time."}]},{"syntax":"swift","type":"codeListing","code":["@main","struct Time: ParsableCommand {","    @Flag var includeSeconds = false","","    mutating func run() {","        if includeSeconds {","            print(Date.now.formatted(.dateTime.hour().minute().second()))","        } else {","            print(Date.now.formatted(.dateTime.hour().minute()))","        }","    }","}"]},{"inlineContent":[{"type":"codeVoice","code":"includeSeconds"},{"text":" has a default value of ","type":"text"},{"code":"false","type":"codeVoice"},{"text":", but becomes ","type":"text"},{"type":"codeVoice","code":"true"},{"text":" if","type":"text"},{"text":" ","type":"text"},{"code":"--include-seconds","type":"codeVoice"},{"text":" is provided on the command line.","type":"text"}],"type":"paragraph"},{"code":["$ time","11:09 AM","$ time --include-seconds","11:09:15 AM"],"type":"codeListing","syntax":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"A flag can have a value that is a "},{"type":"codeVoice","code":"Bool"},{"type":"text","text":", an "},{"type":"codeVoice","code":"Int"},{"type":"text","text":", or any "},{"code":"EnumerableFlag","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"type. When using an "},{"code":"EnumerableFlag","type":"codeVoice"},{"type":"text","text":" type as a flag, the individual cases"},{"type":"text","text":" "},{"text":"form the flags that are used on the command line.","type":"text"}]},{"type":"codeListing","syntax":null,"code":["@main","struct Math: ParsableCommand {","    enum Operation: EnumerableFlag {","        case add","        case multiply","    }","","    @Flag var operation: Operation","","    mutating func run() {","        print(\"Time to \\(operation)!\")","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Instead of using the name of the "},{"code":"operation","type":"codeVoice"},{"type":"text","text":" property as the flag in this"},{"text":" ","type":"text"},{"type":"text","text":"case, the two cases of the "},{"type":"codeVoice","code":"Operation"},{"type":"text","text":" enumeration become valid flags."},{"type":"text","text":" "},{"text":"The ","type":"text"},{"type":"codeVoice","code":"operation"},{"type":"text","text":" property is neither optional nor given a default value, so"},{"type":"text","text":" "},{"type":"text","text":"one of the two flags is required."}]},{"code":["$ math --add","Time to add!","$ math","Error: Missing one of: '--add', '--multiply'"],"syntax":null,"type":"codeListing"}],"kind":"content"}],"variants":[{"paths":["\/documentation\/argumentparser\/flag"],"traits":[{"interfaceLanguage":"swift"}]}],"metadata":{"role":"symbol","title":"Flag","symbolKind":"struct","externalID":"s:14ArgumentParser4FlagV","navigatorTitle":[{"text":"Flag","kind":"identifier"}],"roleHeading":"Structure","modules":[{"name":"ArgumentParser"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Flag"}]},"relationshipsSections":[{"type":"conformsTo","identifiers":["doc:\/\/swift-argument-parser.ArgumentParser\/s8CopyableP","doc:\/\/swift-argument-parser.ArgumentParser\/s23CustomStringConvertibleP","doc:\/\/swift-argument-parser.ArgumentParser\/Se","doc:\/\/swift-argument-parser.ArgumentParser\/s8SendableP"],"kind":"relationships","title":"Conforms To"}],"seeAlsoSections":[{"anchor":"Arguments-Options-and-Flags","title":"Arguments, Options, and Flags","generated":true,"identifiers":["doc:\/\/swift-argument-parser.ArgumentParser\/documentation\/ArgumentParser\/DeclaringArguments","doc:\/\/swift-argument-parser.ArgumentParser\/documentation\/ArgumentParser\/Argument","doc:\/\/swift-argument-parser.ArgumentParser\/documentation\/ArgumentParser\/Option","doc:\/\/swift-argument-parser.ArgumentParser\/documentation\/ArgumentParser\/OptionGroup","doc:\/\/swift-argument-parser.ArgumentParser\/documentation\/ArgumentParser\/ParsableArguments"]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"hierarchy":{"paths":[["doc:\/\/swift-argument-parser.ArgumentParser\/documentation\/ArgumentParser"]]},"kind":"symbol","identifier":{"url":"doc:\/\/swift-argument-parser.ArgumentParser\/documentation\/ArgumentParser\/Flag","interfaceLanguage":"swift"},"references":{"doc://swift-argument-parser.ArgumentParser/documentation/ArgumentParser/FlagInversion":{"kind":"symbol","title":"FlagInversion","url":"\/documentation\/argumentparser\/flaginversion","navigatorTitle":[{"text":"FlagInversion","kind":"identifier"}],"abstract":[{"type":"text","text":"The options for converting a Boolean flag into a "},{"code":"true","type":"codeVoice"},{"text":"\/","type":"text"},{"code":"false","type":"codeVoice"},{"type":"text","text":" pair."}],"identifier":"doc:\/\/swift-argument-parser.ArgumentParser\/documentation\/ArgumentParser\/FlagInversion","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"FlagInversion","kind":"identifier"}],"type":"topic"},"doc://swift-argument-parser.ArgumentParser/Se":{"type":"unresolvable","title":"Swift.Decodable","identifier":"doc:\/\/swift-argument-parser.ArgumentParser\/Se"},"doc://swift-argument-parser.ArgumentParser/documentation/ArgumentParser":{"title":"ArgumentParser","type":"topic","abstract":[{"text":"Straightforward, type-safe argument parsing for Swift.","type":"text"}],"identifier":"doc:\/\/swift-argument-parser.ArgumentParser\/documentation\/ArgumentParser","role":"collection","url":"\/documentation\/argumentparser","kind":"symbol"},"doc://swift-argument-parser.ArgumentParser/s8SendableP":{"type":"unresolvable","title":"Swift.Sendable","identifier":"doc:\/\/swift-argument-parser.ArgumentParser\/s8SendableP"},"doc://swift-argument-parser.ArgumentParser/documentation/ArgumentParser/OptionGroup":{"title":"OptionGroup","abstract":[{"text":"A wrapper that transparently includes a parsable type.","type":"text"}],"identifier":"doc:\/\/swift-argument-parser.ArgumentParser\/documentation\/ArgumentParser\/OptionGroup","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"OptionGroup","kind":"identifier"}],"url":"\/documentation\/argumentparser\/optiongroup","navigatorTitle":[{"kind":"identifier","text":"OptionGroup"}],"type":"topic","role":"symbol","kind":"symbol"},"doc://swift-argument-parser.ArgumentParser/documentation/ArgumentParser/Flag/init(exclusivity:help:)-38n7u":{"title":"init(exclusivity:help:)","role":"symbol","url":"\/documentation\/argumentparser\/flag\/init(exclusivity:help:)-38n7u","fragments":[{"text":"init","kind":"identifier"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Element"},{"kind":"text","text":">("},{"text":"exclusivity","kind":"externalParam"},{"kind":"text","text":": "},{"text":"FlagExclusivity","kind":"typeIdentifier","preciseIdentifier":"s:14ArgumentParser15FlagExclusivityV"},{"kind":"text","text":", "},{"text":"help","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:14ArgumentParser0A4HelpV","text":"ArgumentHelp"},{"kind":"text","text":"?)"}],"abstract":[{"text":"Creates a property that gets its value from the presence of a flag,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"where the allowed flags are defined by an "},{"type":"codeVoice","code":"EnumerableFlag"},{"type":"text","text":" type."}],"kind":"symbol","identifier":"doc:\/\/swift-argument-parser.ArgumentParser\/documentation\/ArgumentParser\/Flag\/init(exclusivity:help:)-38n7u","type":"topic"},"doc://swift-argument-parser.ArgumentParser/documentation/ArgumentParser/Flag/init(name:help:)":{"type":"topic","abstract":[{"type":"text","text":"Creates an integer property that gets its value from the number of times"},{"type":"text","text":" "},{"type":"text","text":"a flag appears."}],"role":"symbol","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"type":"codeVoice","code":"Value"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Int"},{"type":"text","text":"."}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"text":"name","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"NameSpecification","kind":"typeIdentifier","preciseIdentifier":"s:14ArgumentParser17NameSpecificationV"},{"kind":"text","text":", "},{"text":"help","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:14ArgumentParser0A4HelpV","text":"ArgumentHelp","kind":"typeIdentifier"},{"kind":"text","text":"?)"}],"title":"init(name:help:)","kind":"symbol","identifier":"doc:\/\/swift-argument-parser.ArgumentParser\/documentation\/ArgumentParser\/Flag\/init(name:help:)","url":"\/documentation\/argumentparser\/flag\/init(name:help:)"},"doc://swift-argument-parser.ArgumentParser/documentation/ArgumentParser/Flag/init(name:inversion:exclusivity:help:)-1h8f7":{"title":"init(name:inversion:exclusivity:help:)","fragments":[{"text":"init","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"name"},{"text":": ","kind":"text"},{"text":"NameSpecification","preciseIdentifier":"s:14ArgumentParser17NameSpecificationV","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"externalParam","text":"inversion"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:14ArgumentParser13FlagInversionV","kind":"typeIdentifier","text":"FlagInversion"},{"kind":"text","text":", "},{"kind":"externalParam","text":"exclusivity"},{"text":": ","kind":"text"},{"text":"FlagExclusivity","preciseIdentifier":"s:14ArgumentParser15FlagExclusivityV","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"help","kind":"externalParam"},{"kind":"text","text":": "},{"text":"ArgumentHelp","preciseIdentifier":"s:14ArgumentParser0A4HelpV","kind":"typeIdentifier"},{"kind":"text","text":"?)"}],"type":"topic","identifier":"doc:\/\/swift-argument-parser.ArgumentParser\/documentation\/ArgumentParser\/Flag\/init(name:inversion:exclusivity:help:)-1h8f7","role":"symbol","url":"\/documentation\/argumentparser\/flag\/init(name:inversion:exclusivity:help:)-1h8f7","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Value"},{"type":"text","text":" is "},{"code":"Bool?","type":"codeVoice"},{"type":"text","text":"."}]},"abstract":[{"text":"Creates a Boolean property that reads its value from the presence of","type":"text"},{"type":"text","text":" "},{"text":"one or more inverted flags.","type":"text"}],"kind":"symbol"},"doc://swift-argument-parser.ArgumentParser/documentation/ArgumentParser/DeclaringArguments":{"url":"\/documentation\/argumentparser\/declaringarguments","kind":"article","abstract":[{"text":"Use the ","type":"text"},{"type":"codeVoice","code":"@Argument"},{"type":"text","text":", "},{"type":"codeVoice","code":"@Option"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"@Flag"},{"type":"text","text":" property wrappers to declare the command-line interface for your command."}],"role":"article","type":"topic","title":"Declaring Arguments, Options, and Flags","identifier":"doc:\/\/swift-argument-parser.ArgumentParser\/documentation\/ArgumentParser\/DeclaringArguments"},"doc://swift-argument-parser.ArgumentParser/s8CopyableP":{"title":"Swift.Copyable","identifier":"doc:\/\/swift-argument-parser.ArgumentParser\/s8CopyableP","type":"unresolvable"},"doc://swift-argument-parser.ArgumentParser/documentation/ArgumentParser/Flag/init(wrappedValue:help:)":{"role":"symbol","type":"topic","fragments":[{"kind":"identifier","text":"init"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"Element"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"wrappedValue"},{"text":": [","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:14ArgumentParser4FlagV12wrappedValue4helpACySayqd__GGAF_AA0A4HelpVSgtcAFRszAA010EnumerableC0Rd__lufc7ElementL_qd__mfp","text":"Element"},{"text":"], ","kind":"text"},{"kind":"externalParam","text":"help"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:14ArgumentParser0A4HelpV","kind":"typeIdentifier","text":"ArgumentHelp"},{"kind":"text","text":"?)"}],"abstract":[{"text":"Creates an array property that gets its values from the presence of","type":"text"},{"text":" ","type":"text"},{"text":"zero or more flags, where the allowed flags are defined by an","type":"text"},{"text":" ","type":"text"},{"code":"EnumerableFlag","type":"codeVoice"},{"text":" type.","type":"text"}],"kind":"symbol","url":"\/documentation\/argumentparser\/flag\/init(wrappedvalue:help:)","identifier":"doc:\/\/swift-argument-parser.ArgumentParser\/documentation\/ArgumentParser\/Flag\/init(wrappedValue:help:)","title":"init(wrappedValue:help:)"},"doc://swift-argument-parser.ArgumentParser/documentation/ArgumentParser/Flag/init(help:)":{"abstract":[{"type":"text","text":"Creates an array property with no default value that gets its values from the presence of zero or more flags, where the allowed flags are defined by an "},{"type":"codeVoice","code":"EnumerableFlag"},{"type":"text","text":" type."}],"identifier":"doc:\/\/swift-argument-parser.ArgumentParser\/documentation\/ArgumentParser\/Flag\/init(help:)","type":"topic","title":"init(help:)","role":"symbol","url":"\/documentation\/argumentparser\/flag\/init(help:)","kind":"symbol","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Element"},{"kind":"text","text":">("},{"kind":"externalParam","text":"help"},{"kind":"text","text":": "},{"text":"ArgumentHelp","kind":"typeIdentifier","preciseIdentifier":"s:14ArgumentParser0A4HelpV"},{"kind":"text","text":"?)"}]},"doc://swift-argument-parser.ArgumentParser/documentation/ArgumentParser/Flag/init(exclusivity:help:)-5fggj":{"abstract":[{"type":"text","text":"Creates a property with no default value that gets its value from the presence of a flag."}],"identifier":"doc:\/\/swift-argument-parser.ArgumentParser\/documentation\/ArgumentParser\/Flag\/init(exclusivity:help:)-5fggj","title":"init(exclusivity:help:)","role":"symbol","conformance":{"constraints":[{"code":"Value","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"EnumerableFlag","type":"codeVoice"},{"type":"text","text":"."}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"url":"\/documentation\/argumentparser\/flag\/init(exclusivity:help:)-5fggj","type":"topic","fragments":[{"text":"init","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"exclusivity"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:14ArgumentParser15FlagExclusivityV","text":"FlagExclusivity"},{"kind":"text","text":", "},{"kind":"externalParam","text":"help"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:14ArgumentParser0A4HelpV","text":"ArgumentHelp"},{"text":"?)","kind":"text"}],"kind":"symbol"},"doc://swift-argument-parser.ArgumentParser/documentation/ArgumentParser/Option":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Option","kind":"identifier"}],"navigatorTitle":[{"text":"Option","kind":"identifier"}],"kind":"symbol","abstract":[{"type":"text","text":"A property wrapper that represents a command-line option."}],"role":"symbol","title":"Option","url":"\/documentation\/argumentparser\/option","identifier":"doc:\/\/swift-argument-parser.ArgumentParser\/documentation\/ArgumentParser\/Option","type":"topic"},"doc://swift-argument-parser.ArgumentParser/documentation/ArgumentParser/Flag/init(wrappedValue:name:help:)":{"title":"init(wrappedValue:name:help:)","conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"Value"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Bool"},{"type":"text","text":"."}]},"identifier":"doc:\/\/swift-argument-parser.ArgumentParser\/documentation\/ArgumentParser\/Flag\/init(wrappedValue:name:help:)","abstract":[{"type":"text","text":"Creates a Boolean property with default value provided by standard Swift default value syntax that reads its value from the presence of a flag."}],"kind":"symbol","type":"topic","role":"symbol","url":"\/documentation\/argumentparser\/flag\/init(wrappedvalue:name:help:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"wrappedValue"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"name","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"NameSpecification","preciseIdentifier":"s:14ArgumentParser17NameSpecificationV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"help"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"ArgumentHelp","preciseIdentifier":"s:14ArgumentParser0A4HelpV"},{"kind":"text","text":"?)"}]},"doc://swift-argument-parser.ArgumentParser/s23CustomStringConvertibleP":{"identifier":"doc:\/\/swift-argument-parser.ArgumentParser\/s23CustomStringConvertibleP","title":"Swift.CustomStringConvertible","type":"unresolvable"},"doc://swift-argument-parser.ArgumentParser/documentation/ArgumentParser/Flag/CustomStringConvertible-Implementations":{"title":"CustomStringConvertible Implementations","identifier":"doc:\/\/swift-argument-parser.ArgumentParser\/documentation\/ArgumentParser\/Flag\/CustomStringConvertible-Implementations","abstract":[],"kind":"article","type":"topic","role":"collectionGroup","url":"\/documentation\/argumentparser\/flag\/customstringconvertible-implementations"},"doc://swift-argument-parser.ArgumentParser/documentation/ArgumentParser/Flag/init(wrappedValue:exclusivity:help:)":{"abstract":[{"type":"text","text":"Creates a property with a default value provided by standard Swift default value syntax that gets its value from the presence of a flag."}],"identifier":"doc:\/\/swift-argument-parser.ArgumentParser\/documentation\/ArgumentParser\/Flag\/init(wrappedValue:exclusivity:help:)","type":"topic","title":"init(wrappedValue:exclusivity:help:)","role":"symbol","url":"\/documentation\/argumentparser\/flag\/init(wrappedvalue:exclusivity:help:)","kind":"symbol","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"wrappedValue"},{"kind":"text","text":": "},{"preciseIdentifier":"s:14ArgumentParser4FlagVA2A010EnumerableC0RzlE5Valuexmfp","kind":"typeIdentifier","text":"Value"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"exclusivity"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:14ArgumentParser15FlagExclusivityV","text":"FlagExclusivity"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"help"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"ArgumentHelp","preciseIdentifier":"s:14ArgumentParser0A4HelpV"},{"text":"?)","kind":"text"}],"conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"Value","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"EnumerableFlag","type":"codeVoice"},{"text":".","type":"text"}]}},"doc://swift-argument-parser.ArgumentParser/documentation/ArgumentParser/Flag/init(name:inversion:exclusivity:help:)-12okg":{"title":"init(name:inversion:exclusivity:help:)","fragments":[{"text":"init","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"name"},{"kind":"text","text":": "},{"preciseIdentifier":"s:14ArgumentParser17NameSpecificationV","text":"NameSpecification","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"externalParam","text":"inversion"},{"text":": ","kind":"text"},{"text":"FlagInversion","kind":"typeIdentifier","preciseIdentifier":"s:14ArgumentParser13FlagInversionV"},{"kind":"text","text":", "},{"text":"exclusivity","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:14ArgumentParser15FlagExclusivityV","text":"FlagExclusivity"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"help"},{"text":": ","kind":"text"},{"text":"ArgumentHelp","kind":"typeIdentifier","preciseIdentifier":"s:14ArgumentParser0A4HelpV"},{"text":"?)","kind":"text"}],"type":"topic","identifier":"doc:\/\/swift-argument-parser.ArgumentParser\/documentation\/ArgumentParser\/Flag\/init(name:inversion:exclusivity:help:)-12okg","role":"symbol","url":"\/documentation\/argumentparser\/flag\/init(name:inversion:exclusivity:help:)-12okg","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"Value","type":"codeVoice"},{"type":"text","text":" is "},{"code":"Bool","type":"codeVoice"},{"type":"text","text":"."}]},"abstract":[{"text":"Creates a Boolean property with no default value that reads its value from the presence of one or more inverted flags.","type":"text"}],"kind":"symbol"},"doc://swift-argument-parser.ArgumentParser/documentation/ArgumentParser/ParsableArguments":{"url":"\/documentation\/argumentparser\/parsablearguments","navigatorTitle":[{"kind":"identifier","text":"ParsableArguments"}],"identifier":"doc:\/\/swift-argument-parser.ArgumentParser\/documentation\/ArgumentParser\/ParsableArguments","role":"symbol","title":"ParsableArguments","kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ParsableArguments","kind":"identifier"}],"type":"topic","abstract":[{"type":"text","text":"A type that can be parsed from a program’s command-line arguments."}]},"doc://swift-argument-parser.ArgumentParser/documentation/ArgumentParser/Flag":{"role":"symbol","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"Flag","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"Flag"}],"abstract":[{"type":"text","text":"A property wrapper that represents a command-line flag."}],"kind":"symbol","url":"\/documentation\/argumentparser\/flag","identifier":"doc:\/\/swift-argument-parser.ArgumentParser\/documentation\/ArgumentParser\/Flag","title":"Flag"},"doc://swift-argument-parser.ArgumentParser/documentation/ArgumentParser/Flag/init(wrappedValue:name:inversion:exclusivity:help:)":{"kind":"symbol","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"type":"codeVoice","code":"Value"},{"text":" is ","type":"text"},{"code":"Bool","type":"codeVoice"},{"type":"text","text":"."}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"title":"init(wrappedValue:name:inversion:exclusivity:help:)","url":"\/documentation\/argumentparser\/flag\/init(wrappedvalue:name:inversion:exclusivity:help:)","abstract":[{"text":"Creates a Boolean property with default value provided by standard Swift default value syntax that reads its value from the presence of one or more inverted flags.","type":"text"}],"identifier":"doc:\/\/swift-argument-parser.ArgumentParser\/documentation\/ArgumentParser\/Flag\/init(wrappedValue:name:inversion:exclusivity:help:)","role":"symbol","fragments":[{"kind":"identifier","text":"init"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"wrappedValue"},{"text":": ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"name"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:14ArgumentParser17NameSpecificationV","text":"NameSpecification"},{"kind":"text","text":", "},{"text":"inversion","kind":"externalParam"},{"kind":"text","text":": "},{"text":"FlagInversion","kind":"typeIdentifier","preciseIdentifier":"s:14ArgumentParser13FlagInversionV"},{"text":", ","kind":"text"},{"text":"exclusivity","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:14ArgumentParser15FlagExclusivityV","kind":"typeIdentifier","text":"FlagExclusivity"},{"kind":"text","text":", "},{"kind":"externalParam","text":"help"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"ArgumentHelp","preciseIdentifier":"s:14ArgumentParser0A4HelpV"},{"kind":"text","text":"?)"}],"type":"topic"},"doc://swift-argument-parser.ArgumentParser/documentation/ArgumentParser/Argument":{"title":"Argument","abstract":[{"text":"A property wrapper that represents a positional command-line argument.","type":"text"}],"navigatorTitle":[{"text":"Argument","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Argument"}],"type":"topic","role":"symbol","kind":"symbol","identifier":"doc:\/\/swift-argument-parser.ArgumentParser\/documentation\/ArgumentParser\/Argument","url":"\/documentation\/argumentparser\/argument"},"doc://swift-argument-parser.ArgumentParser/documentation/ArgumentParser/FlagExclusivity":{"title":"FlagExclusivity","url":"\/documentation\/argumentparser\/flagexclusivity","role":"symbol","identifier":"doc:\/\/swift-argument-parser.ArgumentParser\/documentation\/ArgumentParser\/FlagExclusivity","navigatorTitle":[{"kind":"identifier","text":"FlagExclusivity"}],"type":"topic","abstract":[{"text":"The options for treating enumeration-based flags as exclusive.","type":"text"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"FlagExclusivity","kind":"identifier"}]},"doc://swift-argument-parser.ArgumentParser/documentation/ArgumentParser/Flag/wrappedValue":{"abstract":[{"text":"The value presented by this property wrapper.","type":"text"}],"type":"topic","identifier":"doc:\/\/swift-argument-parser.ArgumentParser\/documentation\/ArgumentParser\/Flag\/wrappedValue","title":"wrappedValue","role":"symbol","url":"\/documentation\/argumentparser\/flag\/wrappedvalue","fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"kind":"identifier","text":"wrappedValue"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Value","preciseIdentifier":"s:14ArgumentParser4FlagV5Valuexmfp"}],"kind":"symbol"}}}