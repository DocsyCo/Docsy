{"identifier":{"url":"doc:\/\/swift-argument-parser.ArgumentParser\/documentation\/ArgumentParser\/SingleValueParsingStrategy\/unconditional","interfaceLanguage":"swift"},"sections":[],"variants":[{"paths":["\/documentation\/argumentparser\/singlevalueparsingstrategy\/unconditional"],"traits":[{"interfaceLanguage":"swift"}]}],"metadata":{"fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"text":"unconditional","kind":"identifier"},{"text":": ","kind":"text"},{"text":"SingleValueParsingStrategy","kind":"typeIdentifier","preciseIdentifier":"s:14ArgumentParser26SingleValueParsingStrategyV"}],"externalID":"s:14ArgumentParser26SingleValueParsingStrategyV13unconditionalACvpZ","role":"symbol","symbolKind":"property","title":"unconditional","modules":[{"name":"ArgumentParser"}],"roleHeading":"Type Property"},"kind":"symbol","primaryContentSections":[{"declarations":[{"tokens":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"unconditional"},{"kind":"text","text":": "},{"preciseIdentifier":"s:14ArgumentParser26SingleValueParsingStrategyV","text":"SingleValueParsingStrategy","kind":"typeIdentifier","identifier":"doc:\/\/swift-argument-parser.ArgumentParser\/documentation\/ArgumentParser\/SingleValueParsingStrategy"},{"text":" { ","kind":"text"},{"text":"get","kind":"keyword"},{"kind":"text","text":" }"}],"platforms":["macOS"],"languages":["swift"]}],"kind":"declarations"},{"kind":"content","content":[{"anchor":"discussion","type":"heading","level":2,"text":"Discussion"},{"type":"paragraph","inlineContent":[{"text":"For inputs such as ","type":"text"},{"type":"codeVoice","code":"--foo --bar baz"},{"type":"text","text":", if "},{"type":"codeVoice","code":".unconditional"},{"text":" is used for ","type":"text"},{"code":"foo","type":"codeVoice"},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"this would read ","type":"text"},{"type":"codeVoice","code":"--bar"},{"text":" as the value for ","type":"text"},{"type":"codeVoice","code":"foo"},{"type":"text","text":" and would use "},{"code":"baz","type":"codeVoice"},{"type":"text","text":" as"},{"type":"text","text":" "},{"text":"the next positional argument.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This allows reading negative numeric values or capturing flags to be"},{"type":"text","text":" "},{"text":"passed through to another program since the leading hyphen is normally","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"interpreted as the start of another option."}]},{"name":"Note","style":"note","type":"aside","content":[{"type":"paragraph","inlineContent":[{"text":"This is usually ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"not"}]},{"type":"text","text":" what users would expect. Use with caution."}]}]}]}],"schemaVersion":{"patch":0,"minor":3,"major":0},"hierarchy":{"paths":[["doc:\/\/swift-argument-parser.ArgumentParser\/documentation\/ArgumentParser","doc:\/\/swift-argument-parser.ArgumentParser\/documentation\/ArgumentParser\/Option","doc:\/\/swift-argument-parser.ArgumentParser\/documentation\/ArgumentParser\/SingleValueParsingStrategy"]]},"abstract":[{"type":"text","text":"Parse the next input, even if it could be interpreted as an option or"},{"text":" ","type":"text"},{"type":"text","text":"flag."}],"references":{"doc://swift-argument-parser.ArgumentParser/documentation/ArgumentParser/SingleValueParsingStrategy":{"abstract":[{"type":"text","text":"The strategy to use when parsing a single value from "},{"type":"codeVoice","code":"@Option"},{"type":"text","text":" arguments."}],"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"SingleValueParsingStrategy","kind":"identifier"}],"role":"symbol","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"SingleValueParsingStrategy"}],"identifier":"doc:\/\/swift-argument-parser.ArgumentParser\/documentation\/ArgumentParser\/SingleValueParsingStrategy","title":"SingleValueParsingStrategy","type":"topic","url":"\/documentation\/argumentparser\/singlevalueparsingstrategy"},"doc://swift-argument-parser.ArgumentParser/documentation/ArgumentParser/SingleValueParsingStrategy/unconditional":{"role":"symbol","abstract":[{"text":"Parse the next input, even if it could be interpreted as an option or","type":"text"},{"type":"text","text":" "},{"text":"flag.","type":"text"}],"title":"unconditional","kind":"symbol","identifier":"doc:\/\/swift-argument-parser.ArgumentParser\/documentation\/ArgumentParser\/SingleValueParsingStrategy\/unconditional","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"unconditional"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:14ArgumentParser26SingleValueParsingStrategyV","text":"SingleValueParsingStrategy","kind":"typeIdentifier"}],"type":"topic","url":"\/documentation\/argumentparser\/singlevalueparsingstrategy\/unconditional"},"doc://swift-argument-parser.ArgumentParser/documentation/ArgumentParser/Option":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Option","kind":"identifier"}],"navigatorTitle":[{"text":"Option","kind":"identifier"}],"kind":"symbol","abstract":[{"type":"text","text":"A property wrapper that represents a command-line option."}],"role":"symbol","title":"Option","url":"\/documentation\/argumentparser\/option","identifier":"doc:\/\/swift-argument-parser.ArgumentParser\/documentation\/ArgumentParser\/Option","type":"topic"},"doc://swift-argument-parser.ArgumentParser/documentation/ArgumentParser":{"title":"ArgumentParser","type":"topic","abstract":[{"text":"Straightforward, type-safe argument parsing for Swift.","type":"text"}],"identifier":"doc:\/\/swift-argument-parser.ArgumentParser\/documentation\/ArgumentParser","role":"collection","url":"\/documentation\/argumentparser","kind":"symbol"}}}