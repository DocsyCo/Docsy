{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/swift-argument-parser.ArgumentParser\/documentation\/ArgumentParser\/ArgumentArrayParsingStrategy\/postTerminator"},"schemaVersion":{"patch":0,"minor":3,"major":0},"seeAlsoSections":[{"title":"Parsing Strategies","identifiers":["doc:\/\/swift-argument-parser.ArgumentParser\/documentation\/ArgumentParser\/ArgumentArrayParsingStrategy\/remaining","doc:\/\/swift-argument-parser.ArgumentParser\/documentation\/ArgumentParser\/ArgumentArrayParsingStrategy\/allUnrecognized","doc:\/\/swift-argument-parser.ArgumentParser\/documentation\/ArgumentParser\/ArgumentArrayParsingStrategy\/captureForPassthrough"],"generated":true,"anchor":"Parsing-Strategies"}],"variants":[{"paths":["\/documentation\/argumentparser\/argumentarrayparsingstrategy\/postterminator"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"kind":"symbol","hierarchy":{"paths":[["doc:\/\/swift-argument-parser.ArgumentParser\/documentation\/ArgumentParser","doc:\/\/swift-argument-parser.ArgumentParser\/documentation\/ArgumentParser\/Argument","doc:\/\/swift-argument-parser.ArgumentParser\/documentation\/ArgumentParser\/ArgumentArrayParsingStrategy"]]},"abstract":[{"text":"Before parsing arguments, capture all inputs that follow the ","type":"text"},{"type":"codeVoice","code":"--"},{"type":"text","text":" "},{"text":"terminator in this argument array.","type":"text"}],"metadata":{"modules":[{"name":"ArgumentParser"}],"role":"symbol","externalID":"s:14ArgumentParser0A20ArrayParsingStrategyV14postTerminatorACvpZ","symbolKind":"property","roleHeading":"Type Property","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"postTerminator"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:14ArgumentParser0A20ArrayParsingStrategyV","text":"ArgumentArrayParsingStrategy","kind":"typeIdentifier"}],"title":"postTerminator"},"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"kind":"identifier","text":"postTerminator"},{"kind":"text","text":": "},{"identifier":"doc:\/\/swift-argument-parser.ArgumentParser\/documentation\/ArgumentParser\/ArgumentArrayParsingStrategy","kind":"typeIdentifier","text":"ArgumentArrayParsingStrategy","preciseIdentifier":"s:14ArgumentParser0A20ArrayParsingStrategyV"},{"kind":"text","text":" { "},{"kind":"keyword","text":"get"},{"text":" }","kind":"text"}],"platforms":["macOS"],"languages":["swift"]}]},{"kind":"content","content":[{"type":"heading","text":"Discussion","level":2,"anchor":"discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, the "},{"type":"codeVoice","code":"Example"},{"type":"text","text":" command defined below has a "},{"type":"codeVoice","code":"words"},{"text":" array that","type":"text"},{"type":"text","text":" "},{"type":"text","text":"uses the "},{"code":"postTerminator","type":"codeVoice"},{"text":" parsing strategy:","type":"text"}]},{"type":"codeListing","syntax":null,"code":["@main","struct Example: ParsableCommand {","    @Flag var verbose = false","    @Argument var name = \"\"","","    @Argument(parsing: .postTerminator)","    var words: [String]","","    func run() {","        print(words.joined(separator: \"\\n\"))","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Before looking for the "},{"code":"--verbose","type":"codeVoice"},{"type":"text","text":" flag and "},{"type":"codeVoice","code":"<name>"},{"text":" argument, any inputs","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"after the "},{"type":"codeVoice","code":"--"},{"type":"text","text":" terminator are captured into the "},{"type":"codeVoice","code":"words"},{"text":" array.","type":"text"}]},{"code":["$ example --verbose Asa -- one two --other","one","two","--other","$ example Asa Extra -- one two --other","Error: Unexpected argument 'Extra'"],"syntax":null,"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Because options are parsed before arguments, an option that consumes or"},{"type":"text","text":" "},{"type":"text","text":"suppresses the "},{"code":"--","type":"codeVoice"},{"text":" terminator can prevent a ","type":"text"},{"code":"postTerminator","type":"codeVoice"},{"type":"text","text":" argument"},{"text":" ","type":"text"},{"type":"text","text":"array from capturing any input. In particular, the"},{"text":" ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/swift-argument-parser.ArgumentParser\/documentation\/ArgumentParser\/SingleValueParsingStrategy\/unconditional"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/swift-argument-parser.ArgumentParser\/documentation\/ArgumentParser\/ArrayParsingStrategy\/unconditionalSingleValue"},{"type":"text","text":", and"},{"text":" ","type":"text"},{"identifier":"doc:\/\/swift-argument-parser.ArgumentParser\/documentation\/ArgumentParser\/ArrayParsingStrategy\/remaining","isActive":true,"type":"reference"},{"type":"text","text":" parsing strategies can all consume"},{"type":"text","text":" "},{"type":"text","text":"the terminator as part of their values."}]},{"type":"aside","content":[{"type":"paragraph","inlineContent":[{"text":"This parsing strategy can be surprising for users, since it","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"changes the behavior of the "},{"code":"--","type":"codeVoice"},{"text":" terminator. Prefer ","type":"text"},{"identifier":"doc:\/\/swift-argument-parser.ArgumentParser\/documentation\/ArgumentParser\/ArgumentArrayParsingStrategy\/remaining","type":"reference","isActive":true},{"type":"text","text":" "},{"text":"whenever possible.","type":"text"}]}],"name":"Note","style":"note"}]}],"references":{"doc://swift-argument-parser.ArgumentParser/documentation/ArgumentParser/ArgumentArrayParsingStrategy":{"title":"ArgumentArrayParsingStrategy","abstract":[{"type":"text","text":"The strategy to use when parsing multiple values from positional arguments"},{"type":"text","text":" "},{"text":"into an array.","type":"text"}],"url":"\/documentation\/argumentparser\/argumentarrayparsingstrategy","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ArgumentArrayParsingStrategy"}],"type":"topic","kind":"symbol","identifier":"doc:\/\/swift-argument-parser.ArgumentParser\/documentation\/ArgumentParser\/ArgumentArrayParsingStrategy","navigatorTitle":[{"text":"ArgumentArrayParsingStrategy","kind":"identifier"}]},"doc://swift-argument-parser.ArgumentParser/documentation/ArgumentParser/ArrayParsingStrategy/remaining":{"type":"topic","title":"remaining","role":"symbol","kind":"symbol","fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"remaining"},{"kind":"text","text":": "},{"text":"ArrayParsingStrategy","preciseIdentifier":"s:14ArgumentParser20ArrayParsingStrategyV","kind":"typeIdentifier"}],"identifier":"doc:\/\/swift-argument-parser.ArgumentParser\/documentation\/ArgumentParser\/ArrayParsingStrategy\/remaining","abstract":[{"type":"text","text":"Parse all remaining arguments into an array."}],"url":"\/documentation\/argumentparser\/arrayparsingstrategy\/remaining"},"doc://swift-argument-parser.ArgumentParser/documentation/ArgumentParser/Argument":{"title":"Argument","abstract":[{"text":"A property wrapper that represents a positional command-line argument.","type":"text"}],"navigatorTitle":[{"text":"Argument","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Argument"}],"type":"topic","role":"symbol","kind":"symbol","identifier":"doc:\/\/swift-argument-parser.ArgumentParser\/documentation\/ArgumentParser\/Argument","url":"\/documentation\/argumentparser\/argument"},"doc://swift-argument-parser.ArgumentParser/documentation/ArgumentParser":{"title":"ArgumentParser","type":"topic","abstract":[{"text":"Straightforward, type-safe argument parsing for Swift.","type":"text"}],"identifier":"doc:\/\/swift-argument-parser.ArgumentParser\/documentation\/ArgumentParser","role":"collection","url":"\/documentation\/argumentparser","kind":"symbol"},"doc://swift-argument-parser.ArgumentParser/documentation/ArgumentParser/SingleValueParsingStrategy/unconditional":{"role":"symbol","abstract":[{"text":"Parse the next input, even if it could be interpreted as an option or","type":"text"},{"type":"text","text":" "},{"text":"flag.","type":"text"}],"title":"unconditional","kind":"symbol","identifier":"doc:\/\/swift-argument-parser.ArgumentParser\/documentation\/ArgumentParser\/SingleValueParsingStrategy\/unconditional","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"unconditional"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:14ArgumentParser26SingleValueParsingStrategyV","text":"SingleValueParsingStrategy","kind":"typeIdentifier"}],"type":"topic","url":"\/documentation\/argumentparser\/singlevalueparsingstrategy\/unconditional"},"doc://swift-argument-parser.ArgumentParser/documentation/ArgumentParser/ArgumentArrayParsingStrategy/remaining":{"identifier":"doc:\/\/swift-argument-parser.ArgumentParser\/documentation\/ArgumentParser\/ArgumentArrayParsingStrategy\/remaining","role":"symbol","title":"remaining","kind":"symbol","type":"topic","url":"\/documentation\/argumentparser\/argumentarrayparsingstrategy\/remaining","abstract":[{"text":"Parse only unprefixed values from the command-line input, ignoring","type":"text"},{"type":"text","text":" "},{"text":"any inputs that have a dash prefix. This is the default strategy.","type":"text"}],"fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"kind":"identifier","text":"remaining"},{"text":": ","kind":"text"},{"text":"ArgumentArrayParsingStrategy","kind":"typeIdentifier","preciseIdentifier":"s:14ArgumentParser0A20ArrayParsingStrategyV"}]},"doc://swift-argument-parser.ArgumentParser/documentation/ArgumentParser/ArrayParsingStrategy/unconditionalSingleValue":{"type":"topic","kind":"symbol","role":"symbol","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"unconditionalSingleValue","kind":"identifier"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:14ArgumentParser20ArrayParsingStrategyV","text":"ArrayParsingStrategy","kind":"typeIdentifier"}],"abstract":[{"type":"text","text":"Parse the value immediately after the option while allowing repeating options, joining multiple into an array."}],"title":"unconditionalSingleValue","identifier":"doc:\/\/swift-argument-parser.ArgumentParser\/documentation\/ArgumentParser\/ArrayParsingStrategy\/unconditionalSingleValue","url":"\/documentation\/argumentparser\/arrayparsingstrategy\/unconditionalsinglevalue"},"doc://swift-argument-parser.ArgumentParser/documentation/ArgumentParser/ArgumentArrayParsingStrategy/postTerminator":{"kind":"symbol","title":"postTerminator","type":"topic","abstract":[{"type":"text","text":"Before parsing arguments, capture all inputs that follow the "},{"type":"codeVoice","code":"--"},{"text":" ","type":"text"},{"text":"terminator in this argument array.","type":"text"}],"url":"\/documentation\/argumentparser\/argumentarrayparsingstrategy\/postterminator","identifier":"doc:\/\/swift-argument-parser.ArgumentParser\/documentation\/ArgumentParser\/ArgumentArrayParsingStrategy\/postTerminator","role":"symbol","fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"kind":"identifier","text":"postTerminator"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:14ArgumentParser0A20ArrayParsingStrategyV","text":"ArgumentArrayParsingStrategy","kind":"typeIdentifier"}]},"doc://swift-argument-parser.ArgumentParser/documentation/ArgumentParser/ArgumentArrayParsingStrategy/allUnrecognized":{"kind":"symbol","title":"allUnrecognized","type":"topic","abstract":[{"type":"text","text":"After parsing, capture all unrecognized inputs in this argument array."}],"url":"\/documentation\/argumentparser\/argumentarrayparsingstrategy\/allunrecognized","identifier":"doc:\/\/swift-argument-parser.ArgumentParser\/documentation\/ArgumentParser\/ArgumentArrayParsingStrategy\/allUnrecognized","role":"symbol","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"kind":"identifier","text":"allUnrecognized"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:14ArgumentParser0A20ArrayParsingStrategyV","kind":"typeIdentifier","text":"ArgumentArrayParsingStrategy"}]},"doc://swift-argument-parser.ArgumentParser/documentation/ArgumentParser/ArgumentArrayParsingStrategy/captureForPassthrough":{"identifier":"doc:\/\/swift-argument-parser.ArgumentParser\/documentation\/ArgumentParser\/ArgumentArrayParsingStrategy\/captureForPassthrough","role":"symbol","title":"captureForPassthrough","kind":"symbol","type":"topic","url":"\/documentation\/argumentparser\/argumentarrayparsingstrategy\/captureforpassthrough","abstract":[{"text":"Parse all remaining inputs after parsing any known options or flags,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"including dash-prefixed inputs and the "},{"type":"codeVoice","code":"--"},{"type":"text","text":" terminator."}],"fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"text":"captureForPassthrough","kind":"identifier"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"ArgumentArrayParsingStrategy","preciseIdentifier":"s:14ArgumentParser0A20ArrayParsingStrategyV"}]}}}