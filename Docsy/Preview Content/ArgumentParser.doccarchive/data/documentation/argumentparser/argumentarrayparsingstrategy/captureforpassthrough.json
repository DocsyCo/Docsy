{"hierarchy":{"paths":[["doc:\/\/swift-argument-parser.ArgumentParser\/documentation\/ArgumentParser","doc:\/\/swift-argument-parser.ArgumentParser\/documentation\/ArgumentParser\/Argument","doc:\/\/swift-argument-parser.ArgumentParser\/documentation\/ArgumentParser\/ArgumentArrayParsingStrategy"]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/argumentparser\/argumentarrayparsingstrategy\/captureforpassthrough"]}],"primaryContentSections":[{"declarations":[{"tokens":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"kind":"identifier","text":"captureForPassthrough"},{"kind":"text","text":": "},{"text":"ArgumentArrayParsingStrategy","identifier":"doc:\/\/swift-argument-parser.ArgumentParser\/documentation\/ArgumentParser\/ArgumentArrayParsingStrategy","kind":"typeIdentifier","preciseIdentifier":"s:14ArgumentParser0A20ArrayParsingStrategyV"},{"kind":"text","text":" { "},{"text":"get","kind":"keyword"},{"text":" }","kind":"text"}],"platforms":["macOS"],"languages":["swift"]}],"kind":"declarations"},{"content":[{"anchor":"discussion","level":2,"type":"heading","text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can use the "},{"code":"captureForPassthrough","type":"codeVoice"},{"type":"text","text":" parsing strategy if you need to"},{"type":"text","text":" "},{"type":"text","text":"capture a userâ€™s input to manually pass it unchanged to another command."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"When you use this parsing strategy, the parser stops parsing flags and"},{"type":"text","text":" "},{"type":"text","text":"options as soon as it encounters a positional argument or an unrecognized"},{"text":" ","type":"text"},{"text":"flag, and captures all remaining inputs in the array argument.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, the "},{"type":"codeVoice","code":"Example"},{"type":"text","text":" command defined below has an "},{"type":"codeVoice","code":"words"},{"type":"text","text":" array that"},{"type":"text","text":" "},{"type":"text","text":"uses the "},{"code":"captureForPassthrough","type":"codeVoice"},{"text":" parsing strategy:","type":"text"}]},{"syntax":null,"code":["@main","struct Example: ParsableCommand {","    @Flag var verbose = false","","    @Argument(parsing: .captureForPassthrough)","    var words: [String] = []","","    func run() {","        print(words.joined(separator: \"\\n\"))","    }","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Any values after the first unrecognized input are captured in the ","type":"text"},{"code":"words","type":"codeVoice"},{"text":" ","type":"text"},{"text":"array.","type":"text"}]},{"code":["$ example --verbose one two --other","one","two","--other","$ example one two --verbose","one","two","--verbose"],"type":"codeListing","syntax":null},{"type":"paragraph","inlineContent":[{"text":"With the ","type":"text"},{"type":"codeVoice","code":"captureForPassthrough"},{"text":" parsing strategy, the ","type":"text"},{"type":"codeVoice","code":"--"},{"type":"text","text":" terminator"},{"text":" ","type":"text"},{"type":"text","text":"is included in the captured values."}]},{"type":"codeListing","syntax":null,"code":["$ example --verbose one two -- --other","one","two","--","--other"]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This parsing strategy can be surprising for users, particularly"},{"text":" ","type":"text"},{"type":"text","text":"when combined with options and flags. Prefer "},{"type":"reference","identifier":"doc:\/\/swift-argument-parser.ArgumentParser\/documentation\/ArgumentParser\/ArgumentArrayParsingStrategy\/remaining","isActive":true},{"type":"text","text":" or"},{"type":"text","text":" "},{"identifier":"doc:\/\/swift-argument-parser.ArgumentParser\/documentation\/ArgumentParser\/ArgumentArrayParsingStrategy\/allUnrecognized","isActive":true,"type":"reference"},{"type":"text","text":" whenever possible, since users can always terminate"},{"text":" ","type":"text"},{"text":"options and flags with the ","type":"text"},{"type":"codeVoice","code":"--"},{"type":"text","text":" terminator. With the "},{"code":"remaining","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"parsing strategy, the input "},{"type":"codeVoice","code":"--verbose -- one two --other"},{"type":"text","text":" would have"},{"type":"text","text":" "},{"text":"the same result as the first example above.","type":"text"}]}],"name":"Note","type":"aside","style":"note"}],"kind":"content"}],"abstract":[{"text":"Parse all remaining inputs after parsing any known options or flags,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"including dash-prefixed inputs and the "},{"code":"--","type":"codeVoice"},{"type":"text","text":" terminator."}],"kind":"symbol","sections":[],"metadata":{"title":"captureForPassthrough","symbolKind":"property","modules":[{"name":"ArgumentParser"}],"fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"kind":"identifier","text":"captureForPassthrough"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:14ArgumentParser0A20ArrayParsingStrategyV","text":"ArgumentArrayParsingStrategy"}],"externalID":"s:14ArgumentParser0A20ArrayParsingStrategyV21captureForPassthroughACvpZ","role":"symbol","roleHeading":"Type Property"},"seeAlsoSections":[{"identifiers":["doc:\/\/swift-argument-parser.ArgumentParser\/documentation\/ArgumentParser\/ArgumentArrayParsingStrategy\/remaining","doc:\/\/swift-argument-parser.ArgumentParser\/documentation\/ArgumentParser\/ArgumentArrayParsingStrategy\/allUnrecognized","doc:\/\/swift-argument-parser.ArgumentParser\/documentation\/ArgumentParser\/ArgumentArrayParsingStrategy\/postTerminator"],"title":"Parsing Strategies","generated":true,"anchor":"Parsing-Strategies"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/swift-argument-parser.ArgumentParser\/documentation\/ArgumentParser\/ArgumentArrayParsingStrategy\/captureForPassthrough"},"schemaVersion":{"minor":3,"major":0,"patch":0},"references":{"doc://swift-argument-parser.ArgumentParser/documentation/ArgumentParser/Argument":{"title":"Argument","abstract":[{"text":"A property wrapper that represents a positional command-line argument.","type":"text"}],"navigatorTitle":[{"text":"Argument","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Argument"}],"type":"topic","role":"symbol","kind":"symbol","identifier":"doc:\/\/swift-argument-parser.ArgumentParser\/documentation\/ArgumentParser\/Argument","url":"\/documentation\/argumentparser\/argument"},"doc://swift-argument-parser.ArgumentParser/documentation/ArgumentParser/ArgumentArrayParsingStrategy/postTerminator":{"kind":"symbol","title":"postTerminator","type":"topic","abstract":[{"type":"text","text":"Before parsing arguments, capture all inputs that follow the "},{"type":"codeVoice","code":"--"},{"text":" ","type":"text"},{"text":"terminator in this argument array.","type":"text"}],"url":"\/documentation\/argumentparser\/argumentarrayparsingstrategy\/postterminator","identifier":"doc:\/\/swift-argument-parser.ArgumentParser\/documentation\/ArgumentParser\/ArgumentArrayParsingStrategy\/postTerminator","role":"symbol","fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"kind":"identifier","text":"postTerminator"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:14ArgumentParser0A20ArrayParsingStrategyV","text":"ArgumentArrayParsingStrategy","kind":"typeIdentifier"}]},"doc://swift-argument-parser.ArgumentParser/documentation/ArgumentParser/ArgumentArrayParsingStrategy/allUnrecognized":{"kind":"symbol","title":"allUnrecognized","type":"topic","abstract":[{"type":"text","text":"After parsing, capture all unrecognized inputs in this argument array."}],"url":"\/documentation\/argumentparser\/argumentarrayparsingstrategy\/allunrecognized","identifier":"doc:\/\/swift-argument-parser.ArgumentParser\/documentation\/ArgumentParser\/ArgumentArrayParsingStrategy\/allUnrecognized","role":"symbol","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"kind":"identifier","text":"allUnrecognized"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:14ArgumentParser0A20ArrayParsingStrategyV","kind":"typeIdentifier","text":"ArgumentArrayParsingStrategy"}]},"doc://swift-argument-parser.ArgumentParser/documentation/ArgumentParser/ArgumentArrayParsingStrategy/remaining":{"identifier":"doc:\/\/swift-argument-parser.ArgumentParser\/documentation\/ArgumentParser\/ArgumentArrayParsingStrategy\/remaining","role":"symbol","title":"remaining","kind":"symbol","type":"topic","url":"\/documentation\/argumentparser\/argumentarrayparsingstrategy\/remaining","abstract":[{"text":"Parse only unprefixed values from the command-line input, ignoring","type":"text"},{"type":"text","text":" "},{"text":"any inputs that have a dash prefix. This is the default strategy.","type":"text"}],"fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"kind":"identifier","text":"remaining"},{"text":": ","kind":"text"},{"text":"ArgumentArrayParsingStrategy","kind":"typeIdentifier","preciseIdentifier":"s:14ArgumentParser0A20ArrayParsingStrategyV"}]},"doc://swift-argument-parser.ArgumentParser/documentation/ArgumentParser":{"title":"ArgumentParser","type":"topic","abstract":[{"text":"Straightforward, type-safe argument parsing for Swift.","type":"text"}],"identifier":"doc:\/\/swift-argument-parser.ArgumentParser\/documentation\/ArgumentParser","role":"collection","url":"\/documentation\/argumentparser","kind":"symbol"},"doc://swift-argument-parser.ArgumentParser/documentation/ArgumentParser/ArgumentArrayParsingStrategy/captureForPassthrough":{"identifier":"doc:\/\/swift-argument-parser.ArgumentParser\/documentation\/ArgumentParser\/ArgumentArrayParsingStrategy\/captureForPassthrough","role":"symbol","title":"captureForPassthrough","kind":"symbol","type":"topic","url":"\/documentation\/argumentparser\/argumentarrayparsingstrategy\/captureforpassthrough","abstract":[{"text":"Parse all remaining inputs after parsing any known options or flags,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"including dash-prefixed inputs and the "},{"type":"codeVoice","code":"--"},{"type":"text","text":" terminator."}],"fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"text":"captureForPassthrough","kind":"identifier"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"ArgumentArrayParsingStrategy","preciseIdentifier":"s:14ArgumentParser0A20ArrayParsingStrategyV"}]},"doc://swift-argument-parser.ArgumentParser/documentation/ArgumentParser/ArgumentArrayParsingStrategy":{"title":"ArgumentArrayParsingStrategy","abstract":[{"type":"text","text":"The strategy to use when parsing multiple values from positional arguments"},{"type":"text","text":" "},{"text":"into an array.","type":"text"}],"url":"\/documentation\/argumentparser\/argumentarrayparsingstrategy","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ArgumentArrayParsingStrategy"}],"type":"topic","kind":"symbol","identifier":"doc:\/\/swift-argument-parser.ArgumentParser\/documentation\/ArgumentParser\/ArgumentArrayParsingStrategy","navigatorTitle":[{"text":"ArgumentArrayParsingStrategy","kind":"identifier"}]}}}