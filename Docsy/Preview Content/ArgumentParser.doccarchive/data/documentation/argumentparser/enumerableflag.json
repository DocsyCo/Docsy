{"kind":"symbol","sections":[],"hierarchy":{"paths":[["doc:\/\/swift-argument-parser.ArgumentParser\/documentation\/ArgumentParser"]]},"identifier":{"url":"doc:\/\/swift-argument-parser.ArgumentParser\/documentation\/ArgumentParser\/EnumerableFlag","interfaceLanguage":"swift"},"schemaVersion":{"patch":0,"major":0,"minor":3},"metadata":{"symbolKind":"protocol","modules":[{"name":"ArgumentParser"}],"externalID":"s:14ArgumentParser14EnumerableFlagP","roleHeading":"Protocol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"EnumerableFlag","kind":"identifier"}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"EnumerableFlag"}],"title":"EnumerableFlag"},"topicSections":[{"anchor":"Type-Methods","generated":true,"title":"Type Methods","identifiers":["doc:\/\/swift-argument-parser.ArgumentParser\/documentation\/ArgumentParser\/EnumerableFlag\/help(for:)-8mmm","doc:\/\/swift-argument-parser.ArgumentParser\/documentation\/ArgumentParser\/EnumerableFlag\/name(for:)-2rrp0"]}],"seeAlsoSections":[{"generated":true,"title":"Custom Types","anchor":"Custom-Types","identifiers":["doc:\/\/swift-argument-parser.ArgumentParser\/documentation\/ArgumentParser\/ExpressibleByArgument"]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/argumentparser\/enumerableflag"]}],"relationshipsSections":[{"title":"Inherits From","type":"inheritsFrom","kind":"relationships","identifiers":["doc:\/\/swift-argument-parser.ArgumentParser\/s12CaseIterableP","doc:\/\/swift-argument-parser.ArgumentParser\/SQ"]}],"primaryContentSections":[{"declarations":[{"tokens":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"EnumerableFlag","kind":"identifier"},{"text":" : ","kind":"text"},{"preciseIdentifier":"s:s12CaseIterableP","text":"CaseIterable","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"preciseIdentifier":"s:SQ","text":"Equatable","kind":"typeIdentifier"}],"languages":["swift"],"platforms":["macOS"]}],"kind":"declarations"},{"kind":"content","content":[{"level":2,"type":"heading","anchor":"overview","text":"Overview"},{"inlineContent":[{"type":"text","text":"For example, the "},{"type":"codeVoice","code":"Size"},{"text":" enumeration declared here can be used as the type of","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"a "},{"code":"@Flag","type":"codeVoice"},{"text":" property:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["enum Size: String, EnumerableFlag {","    case small, medium, large, extraLarge","}","","struct Example: ParsableCommand {","    @Flag var sizes: [Size]","","    mutating func run() {","        print(sizes)","    }","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"By default, each case name is converted to a flag by using the "},{"code":".long","type":"codeVoice"},{"type":"text","text":" name"},{"type":"text","text":" "},{"text":"specification, so a user can call ","type":"text"},{"code":"example","type":"codeVoice"},{"type":"text","text":" like this:"}]},{"code":["$ example --small --large","[.small, .large]"],"type":"codeListing","syntax":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"Provide alternative or additional name specifications for each case by"},{"text":" ","type":"text"},{"text":"implementing the ","type":"text"},{"type":"codeVoice","code":"name(for:)"},{"text":" static method on your ","type":"text"},{"code":"EnumerableFlag","type":"codeVoice"},{"text":" type.","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["extension Size {","    static func name(for value: Self) -> NameSpecification {","        switch value {","        case .extraLarge:","            return [.customShort(\"x\"), .long]","        default:","            return .shortAndLong","        }","    }","}"]},{"inlineContent":[{"text":"With this extension, a user can use short or long versions of the flags:","type":"text"}],"type":"paragraph"},{"code":["$ example -s -l -x --medium","[.small, .large, .extraLarge, .medium]"],"type":"codeListing","syntax":null}]}],"abstract":[{"type":"text","text":"A type that represents the different possible flags to be used by a"},{"text":" ","type":"text"},{"code":"@Flag","type":"codeVoice"},{"text":" property.","type":"text"}],"references":{"doc://swift-argument-parser.ArgumentParser/SQ":{"identifier":"doc:\/\/swift-argument-parser.ArgumentParser\/SQ","title":"Swift.Equatable","type":"unresolvable"},"doc://swift-argument-parser.ArgumentParser/documentation/ArgumentParser/EnumerableFlag":{"abstract":[{"text":"A type that represents the different possible flags to be used by a","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"@Flag"},{"type":"text","text":" property."}],"identifier":"doc:\/\/swift-argument-parser.ArgumentParser\/documentation\/ArgumentParser\/EnumerableFlag","title":"EnumerableFlag","role":"symbol","url":"\/documentation\/argumentparser\/enumerableflag","navigatorTitle":[{"kind":"identifier","text":"EnumerableFlag"}],"type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"EnumerableFlag"}],"kind":"symbol"},"doc://swift-argument-parser.ArgumentParser/documentation/ArgumentParser/EnumerableFlag/help(for:)-8mmm":{"type":"topic","required":true,"title":"help(for:)","role":"symbol","kind":"symbol","defaultImplementations":1,"fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"help"},{"kind":"text","text":"("},{"text":"for","kind":"externalParam"},{"kind":"text","text":": "},{"text":"Self","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:14ArgumentParser0A4HelpV","kind":"typeIdentifier","text":"ArgumentHelp"},{"text":"?","kind":"text"}],"identifier":"doc:\/\/swift-argument-parser.ArgumentParser\/documentation\/ArgumentParser\/EnumerableFlag\/help(for:)-8mmm","abstract":[{"text":"Returns the help information to show for the given flag.","type":"text"}],"url":"\/documentation\/argumentparser\/enumerableflag\/help(for:)-8mmm"},"doc://swift-argument-parser.ArgumentParser/documentation/ArgumentParser/ExpressibleByArgument":{"title":"ExpressibleByArgument","url":"\/documentation\/argumentparser\/expressiblebyargument","role":"symbol","identifier":"doc:\/\/swift-argument-parser.ArgumentParser\/documentation\/ArgumentParser\/ExpressibleByArgument","navigatorTitle":[{"text":"ExpressibleByArgument","kind":"identifier"}],"type":"topic","abstract":[{"type":"text","text":"A type that can be expressed as a command-line argument."}],"kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ExpressibleByArgument"}]},"doc://swift-argument-parser.ArgumentParser/documentation/ArgumentParser/EnumerableFlag/name(for:)-2rrp0":{"identifier":"doc:\/\/swift-argument-parser.ArgumentParser\/documentation\/ArgumentParser\/EnumerableFlag\/name(for:)-2rrp0","title":"name(for:)","type":"topic","abstract":[{"text":"Returns the name specification to use for the given flag.","type":"text"}],"required":true,"url":"\/documentation\/argumentparser\/enumerableflag\/name(for:)-2rrp0","role":"symbol","defaultImplementations":1,"fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"name","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"for"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":") -> ","kind":"text"},{"text":"NameSpecification","preciseIdentifier":"s:14ArgumentParser17NameSpecificationV","kind":"typeIdentifier"}],"kind":"symbol"},"doc://swift-argument-parser.ArgumentParser/documentation/ArgumentParser":{"title":"ArgumentParser","type":"topic","abstract":[{"text":"Straightforward, type-safe argument parsing for Swift.","type":"text"}],"identifier":"doc:\/\/swift-argument-parser.ArgumentParser\/documentation\/ArgumentParser","role":"collection","url":"\/documentation\/argumentparser","kind":"symbol"},"doc://swift-argument-parser.ArgumentParser/s12CaseIterableP":{"identifier":"doc:\/\/swift-argument-parser.ArgumentParser\/s12CaseIterableP","title":"Swift.CaseIterable","type":"unresolvable"}}}