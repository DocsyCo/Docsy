{"kind":"article","variants":[{"paths":["\/documentation\/argumentparser\/customizinghelp"],"traits":[{"interfaceLanguage":"swift"}]}],"metadata":{"roleHeading":"Article","modules":[{"name":"ArgumentParser"}],"role":"article","title":"Customizing Help"},"primaryContentSections":[{"kind":"content","content":[{"level":2,"anchor":"Overview","type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can provide help text when declaring any "},{"type":"codeVoice","code":"@Argument"},{"type":"text","text":", "},{"code":"@Option","type":"codeVoice"},{"text":", or ","type":"text"},{"type":"codeVoice","code":"@Flag"},{"type":"text","text":" by passing a string literal as the "},{"type":"codeVoice","code":"help"},{"type":"text","text":" parameter:"}]},{"syntax":"swift","type":"codeListing","code":["struct Example: ParsableCommand {","    @Flag(help: \"Display extra information while processing.\")","    var verbose = false","","    @Option(help: \"The number of extra lines to show.\")","    var extraLines = 0","","    @Argument(help: \"The input file.\")","    var inputFile: String?","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Users see these strings in the automatically-generated help screen, which is triggered by the "},{"type":"codeVoice","code":"-h"},{"type":"text","text":" or "},{"code":"--help","type":"codeVoice"},{"type":"text","text":" flags, by default:"}]},{"type":"codeListing","code":["% example --help","USAGE: example [--verbose] [--extra-lines <extra-lines>] <input-file>","","ARGUMENTS:","  <input-file>            The input file.","","OPTIONS:","  --verbose               Display extra information while processing.","  --extra-lines <extra-lines>","                          The number of extra lines to show. (default: 0)","  -h, --help              Show help information."],"syntax":null},{"text":"Customizing Help for Arguments","level":2,"type":"heading","anchor":"Customizing-Help-for-Arguments"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For more control over the help text, pass an "},{"isActive":true,"type":"reference","identifier":"doc:\/\/swift-argument-parser.ArgumentParser\/documentation\/ArgumentParser\/ArgumentHelp"},{"text":" instance instead of a string literal. The ","type":"text"},{"code":"ArgumentHelp","type":"codeVoice"},{"type":"text","text":" type can include an abstract (which is what the string literal becomes), a discussion, a value name to use in the usage string, and a visibility level for that argument."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here’s the same command with some extra customization:"}]},{"type":"codeListing","syntax":"swift","code":["struct Example: ParsableCommand {","    @Flag(help: \"Display extra information while processing.\")","    var verbose = false","","    @Option(help: ArgumentHelp(","        \"The number of extra lines to show.\",","        valueName: \"n\"))","    var extraLines = 0","","    @Argument(help: ArgumentHelp(","        \"The input file.\",","        discussion: \"If no input file is provided, the tool reads from stdin.\",","        valueName: \"file\"))","    var inputFile: String?","}"]},{"inlineContent":[{"text":"…and the help screen:","type":"text"}],"type":"paragraph"},{"syntax":null,"type":"codeListing","code":["USAGE: example [--verbose] [--extra-lines <n>] [<file>]","","ARGUMENTS:","  <file>                  The input file.","        If no input file is provided, the tool reads from stdin.","","OPTIONS:","  --verbose               Display extra information while processing.","  --extra-lines <n>       The number of extra lines to show. (default: 0)","  -h, --help              Show help information."]},{"anchor":"Enumerating-Possible-Values","level":2,"type":"heading","text":"Enumerating Possible Values"},{"type":"paragraph","inlineContent":[{"text":"When an argument or option has a fixed set of possible values, listing these values in the help screen can simplify use of your tool. You can customize the displayed set of values for custom ","type":"text"},{"type":"reference","identifier":"doc:\/\/swift-argument-parser.ArgumentParser\/documentation\/ArgumentParser\/ExpressibleByArgument","isActive":true},{"type":"text","text":" types by implementing "},{"isActive":true,"identifier":"doc:\/\/swift-argument-parser.ArgumentParser\/documentation\/ArgumentParser\/ExpressibleByArgument\/allValueStrings-7hjo7","type":"reference"},{"type":"text","text":". Despite the name, "},{"identifier":"doc:\/\/swift-argument-parser.ArgumentParser\/documentation\/ArgumentParser\/ExpressibleByArgument\/allValueStrings-7hjo7","isActive":true,"type":"reference"},{"text":" does ","type":"text"},{"inlineContent":[{"text":"not","type":"text"}],"type":"emphasis"},{"text":" need to be an exhaustive list of possible values.","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["enum Fruit: String, ExpressibleByArgument {","    case apple","    case banana","    case coconut","    case dragonFruit = \"dragon-fruit\"","","    static var allValueStrings: [String] {","        [\"apple\", \"banana\", \"coconut\", \"dragon-fruit\"]","    }","}","","struct FruitStore: ParsableCommand {","    @Argument(help: \"The fruit to purchase\")","    var fruit: Fruit","  ","    @Option(help: \"The number of fruit to purchase\")","    var quantity: Int = 1","}"]},{"inlineContent":[{"text":"The help screen includes the list of values in the description of the ","type":"text"},{"code":"<fruit>","type":"codeVoice"},{"type":"text","text":" argument:"}],"type":"paragraph"},{"code":["USAGE: fruit-store <fruit> [--quantity <quantity>]","","ARGUMENTS:","  <fruit>                 The fruit to purchase (values: apple, banana,","                          coconut, dragon-fruit)","","OPTIONS:","  --quantity <quantity>   The number of fruit to purchase (default: 1)","  -h, --help              Show help information."],"type":"codeListing","syntax":null},{"text":"Deriving Possible Values","level":3,"type":"heading","anchor":"Deriving-Possible-Values"},{"inlineContent":[{"text":"ExpressibleByArgument types that conform to ","type":"text"},{"code":"CaseIterable","type":"codeVoice"},{"type":"text","text":" do not need to manually specify "},{"identifier":"doc:\/\/swift-argument-parser.ArgumentParser\/documentation\/ArgumentParser\/ExpressibleByArgument\/allValueStrings-7hjo7","type":"reference","isActive":true},{"type":"text","text":". Instead, a list of possible values is derived from the type’s cases, as in this updated example:"}],"type":"paragraph"},{"code":["enum Fruit: String, CaseIterable, ExpressibleByArgument {","    case apple","    case banana","    case coconut","    case dragonFruit = \"dragon-fruit\"","}","","struct FruitStore: ParsableCommand {","    @Argument(help: \"The fruit to purchase\")","    var fruit: Fruit","  ","    @Option(help: \"The number of fruit to purchase\")","    var quantity: Int = 1","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"The help screen still contains all the possible values."}],"type":"paragraph"},{"type":"codeListing","code":["USAGE: fruit-store <fruit> [--quantity <quantity>]","","ARGUMENTS:","  <fruit>                 The fruit to purchase (values: apple, banana,","                          coconut, dragon-fruit)","","OPTIONS:","  --quantity <quantity>   The number of fruit to purchase (default: 1)","  -h, --help              Show help information."],"syntax":null},{"type":"paragraph","inlineContent":[{"text":"For an ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/swift-argument-parser.ArgumentParser\/documentation\/ArgumentParser\/ExpressibleByArgument"},{"type":"text","text":" and "},{"code":"CaseIterable","type":"codeVoice"},{"type":"text","text":" type with many cases, you may still want to implement "},{"isActive":true,"type":"reference","identifier":"doc:\/\/swift-argument-parser.ArgumentParser\/documentation\/ArgumentParser\/ExpressibleByArgument\/allValueStrings-7hjo7"},{"type":"text","text":" to avoid an overly long list of values appearing in the help screen. For these types it is recommended to include the most common possible values."}]},{"text":"Controlling Argument Visibility","level":2,"anchor":"Controlling-Argument-Visibility","type":"heading"},{"inlineContent":[{"type":"text","text":"You can specify the visibility of any argument, option, or flag."}],"type":"paragraph"},{"type":"codeListing","code":["struct Example: ParsableCommand {","    @Flag(help: ArgumentHelp(\"Show extra info.\", visibility: .hidden))","    var verbose: Bool = false","","    @Flag(help: ArgumentHelp(\"Use the legacy format.\", visibility: .private))","    var useLegacyFormat: Bool = false","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"--verbose"},{"type":"text","text":" flag is only visible in the extended help screen. The "},{"code":"--use-legacy-format","type":"codeVoice"},{"type":"text","text":" stays hidden even in the extended help screen, due to its "},{"type":"codeVoice","code":".private"},{"type":"text","text":" visibility."}]},{"code":["% example --help","USAGE: example","","OPTIONS:","  -h, --help              Show help information.","","% example --help-hidden","USAGE: example [--verbose]","","OPTIONS:","  --verbose               Show extra info.","  -h, --help              Show help information."],"syntax":null,"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Alternatively, you can group multiple arguments, options, and flags together as part of a ","type":"text"},{"identifier":"doc:\/\/swift-argument-parser.ArgumentParser\/documentation\/ArgumentParser\/ParsableArguments","isActive":true,"type":"reference"},{"type":"text","text":" type, and set the visibility when including them as an "},{"type":"codeVoice","code":"@OptionGroup"},{"text":" property.","type":"text"}]},{"code":["struct ExperimentalFlags: ParsableArguments {","    @Flag(help: \"Use the remote access token. (experimental)\")","    var experimentalUseRemoteAccessToken: Bool = false","","    @Flag(help: \"Use advanced security. (experimental)\")","    var experimentalAdvancedSecurity: Bool = false","}","","struct Example: ParsableCommand {","    @OptionGroup(visibility: .hidden)","    var flags: ExperimentalFlags","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"The members of "},{"type":"codeVoice","code":"ExperimentalFlags"},{"text":" are only shown in the extended help screen:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":null,"code":["% example --help","USAGE: example","","OPTIONS:","  -h, --help              Show help information.","","% example --help-hidden","USAGE: example [--experimental-use-remote-access-token] [--experimental-advanced-security]","","OPTIONS:","  --experimental-use-remote-access-token","                          Use the remote access token. (experimental)","  --experimental-advanced-security","                          Use advanced security. (experimental)","  -h, --help              Show help information."]},{"level":2,"text":"Grouping Arguments in the Help Screen","anchor":"Grouping-Arguments-in-the-Help-Screen","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When you provide a title in an "},{"type":"codeVoice","code":"@OptionGroup"},{"text":" declaration, that type’s  properties are grouped together under your title in the help screen. For example, this command bundles similar arguments together under a  “Build Options” title:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["struct BuildOptions: ParsableArguments {","    @Option(help: \"A setting to pass to the compiler.\")","    var compilerSetting: [String] = []","","    @Option(help: \"A setting to pass to the linker.\")","    var linkerSetting: [String] = []","}","","struct Example: ParsableCommand {","    @Argument(help: \"The input file to process.\")","    var inputFile: String","","    @Flag(help: \"Show extra output.\")","    var verbose: Bool = false","","    @Option(help: \"The path to a configuration file.\")","    var configFile: String?","","    @OptionGroup(title: \"Build Options\")","    var buildOptions: BuildOptions","}"]},{"inlineContent":[{"type":"text","text":"This grouping is reflected in the command’s help screen:"}],"type":"paragraph"},{"type":"codeListing","code":["% example --help","USAGE: example <input-file> [--verbose] [--config-file <config-file>] [--compiler-setting <compiler-setting> ...] [--linker-setting <linker-setting> ...]","","ARGUMENTS:","  <input-file>            The input file to process.","","BUILD OPTIONS:","  --compiler-setting <compiler-setting>","                          A setting to pass to the compiler.","  --linker-setting <linker-setting>","                          A setting to pass to the linker.","","OPTIONS:","  --verbose               Show extra output.","  --config-file <config-file>","                          The path to a configuration file.","  -h, --help              Show help information."],"syntax":null}]}],"seeAlsoSections":[{"title":"Property Customization","anchor":"Property-Customization","identifiers":["doc:\/\/swift-argument-parser.ArgumentParser\/documentation\/ArgumentParser\/ArgumentHelp","doc:\/\/swift-argument-parser.ArgumentParser\/documentation\/ArgumentParser\/ArgumentVisibility","doc:\/\/swift-argument-parser.ArgumentParser\/documentation\/ArgumentParser\/NameSpecification"],"generated":true}],"schemaVersion":{"major":0,"minor":3,"patch":0},"abstract":[{"type":"text","text":"Support your users (and yourself) by providing rich help for arguments, options, and flags."}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/swift-argument-parser.ArgumentParser\/documentation\/ArgumentParser\/CustomizingHelp"},"sections":[],"hierarchy":{"paths":[["doc:\/\/swift-argument-parser.ArgumentParser\/documentation\/ArgumentParser"]]},"references":{"doc://swift-argument-parser.ArgumentParser/documentation/ArgumentParser/ExpressibleByArgument":{"title":"ExpressibleByArgument","url":"\/documentation\/argumentparser\/expressiblebyargument","role":"symbol","identifier":"doc:\/\/swift-argument-parser.ArgumentParser\/documentation\/ArgumentParser\/ExpressibleByArgument","navigatorTitle":[{"text":"ExpressibleByArgument","kind":"identifier"}],"type":"topic","abstract":[{"type":"text","text":"A type that can be expressed as a command-line argument."}],"kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ExpressibleByArgument"}]},"doc://swift-argument-parser.ArgumentParser/documentation/ArgumentParser/NameSpecification":{"role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NameSpecification","kind":"identifier"}],"type":"topic","title":"NameSpecification","abstract":[{"type":"text","text":"A specification for how to represent a property as a command-line argument"},{"type":"text","text":" "},{"type":"text","text":"label."}],"identifier":"doc:\/\/swift-argument-parser.ArgumentParser\/documentation\/ArgumentParser\/NameSpecification","url":"\/documentation\/argumentparser\/namespecification","kind":"symbol","navigatorTitle":[{"text":"NameSpecification","kind":"identifier"}]},"doc://swift-argument-parser.ArgumentParser/documentation/ArgumentParser/ArgumentHelp":{"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ArgumentHelp"}],"navigatorTitle":[{"kind":"identifier","text":"ArgumentHelp"}],"type":"topic","title":"ArgumentHelp","abstract":[{"type":"text","text":"Help information for a command-line argument."}],"url":"\/documentation\/argumentparser\/argumenthelp","identifier":"doc:\/\/swift-argument-parser.ArgumentParser\/documentation\/ArgumentParser\/ArgumentHelp","role":"symbol","kind":"symbol"},"doc://swift-argument-parser.ArgumentParser/documentation/ArgumentParser/ArgumentVisibility":{"title":"ArgumentVisibility","navigatorTitle":[{"text":"ArgumentVisibility","kind":"identifier"}],"role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ArgumentVisibility"}],"kind":"symbol","abstract":[{"text":"Visibility level of an argument’s help.","type":"text"}],"type":"topic","url":"\/documentation\/argumentparser\/argumentvisibility","identifier":"doc:\/\/swift-argument-parser.ArgumentParser\/documentation\/ArgumentParser\/ArgumentVisibility"},"doc://swift-argument-parser.ArgumentParser/documentation/ArgumentParser":{"title":"ArgumentParser","type":"topic","abstract":[{"text":"Straightforward, type-safe argument parsing for Swift.","type":"text"}],"identifier":"doc:\/\/swift-argument-parser.ArgumentParser\/documentation\/ArgumentParser","role":"collection","url":"\/documentation\/argumentparser","kind":"symbol"},"doc://swift-argument-parser.ArgumentParser/documentation/ArgumentParser/ExpressibleByArgument/allValueStrings-7hjo7":{"kind":"symbol","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"allValueStrings"},{"text":": [","kind":"text"},{"text":"String","preciseIdentifier":"s:SS","kind":"typeIdentifier"},{"kind":"text","text":"]"}],"title":"allValueStrings","identifier":"doc:\/\/swift-argument-parser.ArgumentParser\/documentation\/ArgumentParser\/ExpressibleByArgument\/allValueStrings-7hjo7","required":true,"defaultImplementations":3,"role":"symbol","abstract":[{"text":"An array of all possible strings that can convert to a value of this","type":"text"},{"type":"text","text":" "},{"type":"text","text":"type, for display in the help screen."}],"type":"topic","url":"\/documentation\/argumentparser\/expressiblebyargument\/allvaluestrings-7hjo7"},"doc://swift-argument-parser.ArgumentParser/documentation/ArgumentParser/ParsableArguments":{"url":"\/documentation\/argumentparser\/parsablearguments","navigatorTitle":[{"kind":"identifier","text":"ParsableArguments"}],"identifier":"doc:\/\/swift-argument-parser.ArgumentParser\/documentation\/ArgumentParser\/ParsableArguments","role":"symbol","title":"ParsableArguments","kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ParsableArguments","kind":"identifier"}],"type":"topic","abstract":[{"type":"text","text":"A type that can be parsed from a program’s command-line arguments."}]}}}