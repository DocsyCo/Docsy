{"metadata":{"modules":[{"name":"ArgumentParser"}],"roleHeading":"Type Property","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"unconditionalSingleValue"},{"text":": ","kind":"text"},{"text":"ArrayParsingStrategy","kind":"typeIdentifier","preciseIdentifier":"s:14ArgumentParser20ArrayParsingStrategyV"}],"symbolKind":"property","externalID":"s:14ArgumentParser20ArrayParsingStrategyV24unconditionalSingleValueACvpZ","role":"symbol","title":"unconditionalSingleValue"},"hierarchy":{"paths":[["doc:\/\/swift-argument-parser.ArgumentParser\/documentation\/ArgumentParser","doc:\/\/swift-argument-parser.ArgumentParser\/documentation\/ArgumentParser\/Option","doc:\/\/swift-argument-parser.ArgumentParser\/documentation\/ArgumentParser\/ArrayParsingStrategy"]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/argumentparser\/arrayparsingstrategy\/unconditionalsinglevalue"]}],"kind":"symbol","primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"tokens":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"unconditionalSingleValue","kind":"identifier"},{"text":": ","kind":"text"},{"text":"ArrayParsingStrategy","identifier":"doc:\/\/swift-argument-parser.ArgumentParser\/documentation\/ArgumentParser\/ArrayParsingStrategy","preciseIdentifier":"s:14ArgumentParser20ArrayParsingStrategyV","kind":"typeIdentifier"},{"kind":"text","text":" { "},{"kind":"keyword","text":"get"},{"text":" }","kind":"text"}],"languages":["swift"]}]},{"kind":"content","content":[{"level":2,"type":"heading","anchor":"discussion","text":"Discussion"},{"type":"paragraph","inlineContent":[{"text":"This is identical to ","type":"text"},{"type":"codeVoice","code":".singleValue"},{"text":" except that the value will be read","type":"text"},{"type":"text","text":" "},{"type":"text","text":"from the input immediately after the option, even if it could be interpreted as an option."}]},{"type":"paragraph","inlineContent":[{"text":"For example, for a parsable type with a property defined as","type":"text"},{"text":" ","type":"text"},{"code":"@Option(parsing: .unconditionalSingleValue) var read: [String]","type":"codeVoice"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the input "},{"type":"codeVoice","code":"--read foo --read bar"},{"type":"text","text":" would result in the array"},{"text":" ","type":"text"},{"code":"[\"foo\", \"bar\"]","type":"codeVoice"},{"type":"text","text":" â€“ just as it would have been the case for "},{"type":"codeVoice","code":".singleValue"},{"text":".","type":"text"}]},{"content":[{"inlineContent":[{"text":"However, the input ","type":"text"},{"type":"codeVoice","code":"--read --name Foo Bar --read baz"},{"type":"text","text":" would result in"},{"type":"text","text":" "},{"type":"codeVoice","code":"read"},{"type":"text","text":" being set to the array "},{"code":"[\"--name\", \"baz\"]","type":"codeVoice"},{"type":"text","text":". This is usually "},{"type":"emphasis","inlineContent":[{"type":"text","text":"not"}]},{"text":" what users","type":"text"},{"type":"text","text":" "},{"text":"would expect. Use with caution.","type":"text"}],"type":"paragraph"}],"type":"aside","name":"Note","style":"note"}]}],"abstract":[{"type":"text","text":"Parse the value immediately after the option while allowing repeating options, joining multiple into an array."}],"sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/swift-argument-parser.ArgumentParser\/documentation\/ArgumentParser\/ArrayParsingStrategy\/unconditionalSingleValue"},"schemaVersion":{"major":0,"minor":3,"patch":0},"references":{"doc://swift-argument-parser.ArgumentParser/documentation/ArgumentParser/ArrayParsingStrategy":{"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"ArrayParsingStrategy","kind":"identifier"}],"navigatorTitle":[{"text":"ArrayParsingStrategy","kind":"identifier"}],"kind":"symbol","abstract":[{"text":"The strategy to use when parsing multiple values from ","type":"text"},{"code":"@Option","type":"codeVoice"},{"type":"text","text":" arguments into an"},{"text":" ","type":"text"},{"type":"text","text":"array."}],"role":"symbol","title":"ArrayParsingStrategy","url":"\/documentation\/argumentparser\/arrayparsingstrategy","identifier":"doc:\/\/swift-argument-parser.ArgumentParser\/documentation\/ArgumentParser\/ArrayParsingStrategy","type":"topic"},"doc://swift-argument-parser.ArgumentParser/documentation/ArgumentParser/ArrayParsingStrategy/unconditionalSingleValue":{"type":"topic","kind":"symbol","role":"symbol","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"unconditionalSingleValue","kind":"identifier"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:14ArgumentParser20ArrayParsingStrategyV","text":"ArrayParsingStrategy","kind":"typeIdentifier"}],"abstract":[{"type":"text","text":"Parse the value immediately after the option while allowing repeating options, joining multiple into an array."}],"title":"unconditionalSingleValue","identifier":"doc:\/\/swift-argument-parser.ArgumentParser\/documentation\/ArgumentParser\/ArrayParsingStrategy\/unconditionalSingleValue","url":"\/documentation\/argumentparser\/arrayparsingstrategy\/unconditionalsinglevalue"},"doc://swift-argument-parser.ArgumentParser/documentation/ArgumentParser/Option":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Option","kind":"identifier"}],"navigatorTitle":[{"text":"Option","kind":"identifier"}],"kind":"symbol","abstract":[{"type":"text","text":"A property wrapper that represents a command-line option."}],"role":"symbol","title":"Option","url":"\/documentation\/argumentparser\/option","identifier":"doc:\/\/swift-argument-parser.ArgumentParser\/documentation\/ArgumentParser\/Option","type":"topic"},"doc://swift-argument-parser.ArgumentParser/documentation/ArgumentParser":{"title":"ArgumentParser","type":"topic","abstract":[{"text":"Straightforward, type-safe argument parsing for Swift.","type":"text"}],"identifier":"doc:\/\/swift-argument-parser.ArgumentParser\/documentation\/ArgumentParser","role":"collection","url":"\/documentation\/argumentparser","kind":"symbol"}}}