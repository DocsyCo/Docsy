{"schemaVersion":{"major":0,"minor":3,"patch":0},"seeAlsoSections":[{"identifiers":["doc:\/\/swift-atomics.Atomics\/documentation\/Atomics\/AtomicLoadOrdering\/relaxed","doc:\/\/swift-atomics.Atomics\/documentation\/Atomics\/AtomicLoadOrdering\/sequentiallyConsistent"],"generated":true,"title":"Ordering Values","anchor":"Ordering-Values"}],"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"acquiring","kind":"identifier"},{"text":": `Self`","kind":"text"},{"text":" { ","kind":"text"},{"kind":"keyword","text":"get"},{"kind":"text","text":" }"}],"platforms":["macOS"],"languages":["swift"]}]},{"kind":"content","content":[{"level":2,"text":"Discussion","anchor":"discussion","type":"heading"},{"inlineContent":[{"text":"This value corresponds to ","type":"text"},{"type":"codeVoice","code":"std::memory_order_acquire"},{"text":" in C++.","type":"text"}],"type":"paragraph"}]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/atomics\/atomicloadordering\/acquiring"]}],"kind":"symbol","hierarchy":{"paths":[["doc:\/\/swift-atomics.Atomics\/documentation\/Atomics","doc:\/\/swift-atomics.Atomics\/documentation\/Atomics\/AtomicLoadOrdering"]]},"sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/swift-atomics.Atomics\/documentation\/Atomics\/AtomicLoadOrdering\/acquiring"},"abstract":[{"text":"An acquiring load synchronizes with a releasing operation whose","type":"text"},{"type":"text","text":" "},{"text":"value its reads. It ensures that the releasing and acquiring","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"threads agree that all subsequent variable accesses on the"},{"text":" ","type":"text"},{"type":"text","text":"acquiring thread happen after the atomic operation itself."}],"metadata":{"modules":[{"name":"Atomics"}],"fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"text":"acquiring","kind":"identifier"},{"kind":"text","text":": `Self`"}],"externalID":"s:7Atomics18AtomicLoadOrderingV9acquiringACvpZ","extendedModule":"Atomics","symbolKind":"property","title":"acquiring","roleHeading":"Type Property","role":"symbol"},"references":{"doc://swift-atomics.Atomics/documentation/Atomics/AtomicLoadOrdering/sequentiallyConsistent":{"role":"symbol","identifier":"doc:\/\/swift-atomics.Atomics\/documentation\/Atomics\/AtomicLoadOrdering\/sequentiallyConsistent","title":"sequentiallyConsistent","kind":"symbol","url":"\/documentation\/atomics\/atomicloadordering\/sequentiallyconsistent","type":"topic","abstract":[{"type":"text","text":"A sequentially consistent load performs an acquiring load and"},{"text":" ","type":"text"},{"type":"text","text":"also guarantees that it and all other sequentially consistent"},{"type":"text","text":" "},{"text":"atomic operations (loads, stores, updates) appear to be executed","type":"text"},{"text":" ","type":"text"},{"text":"in a single, total sequential ordering.","type":"text"}],"fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"sequentiallyConsistent"},{"text":": `Self`","kind":"text"}]},"doc://swift-atomics.Atomics/documentation/Atomics/AtomicLoadOrdering/acquiring":{"identifier":"doc:\/\/swift-atomics.Atomics\/documentation\/Atomics\/AtomicLoadOrdering\/acquiring","url":"\/documentation\/atomics\/atomicloadordering\/acquiring","abstract":[{"type":"text","text":"An acquiring load synchronizes with a releasing operation whose"},{"type":"text","text":" "},{"text":"value its reads. It ensures that the releasing and acquiring","type":"text"},{"type":"text","text":" "},{"type":"text","text":"threads agree that all subsequent variable accesses on the"},{"text":" ","type":"text"},{"text":"acquiring thread happen after the atomic operation itself.","type":"text"}],"fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"text":"acquiring","kind":"identifier"},{"kind":"text","text":": `Self`"}],"title":"acquiring","kind":"symbol","role":"symbol","type":"topic"},"doc://swift-atomics.Atomics/documentation/Atomics/AtomicLoadOrdering/relaxed":{"role":"symbol","identifier":"doc:\/\/swift-atomics.Atomics\/documentation\/Atomics\/AtomicLoadOrdering\/relaxed","title":"relaxed","kind":"symbol","url":"\/documentation\/atomics\/atomicloadordering\/relaxed","type":"topic","abstract":[{"type":"text","text":"Guarantees the atomicity of the specific operation on which it is applied,"},{"type":"text","text":" "},{"text":"but imposes no ordering constraints on any other variable accesses.","type":"text"}],"fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"relaxed"},{"text":": `Self`","kind":"text"}]},"doc://swift-atomics.Atomics/documentation/Atomics":{"identifier":"doc:\/\/swift-atomics.Atomics\/documentation\/Atomics","url":"\/documentation\/atomics","abstract":[{"type":"text","text":"An atomics library for Swift."}],"title":"Atomics","kind":"symbol","role":"collection","type":"topic"},"doc://swift-atomics.Atomics/documentation/Atomics/AtomicLoadOrdering":{"identifier":"doc:\/\/swift-atomics.Atomics\/documentation\/Atomics\/AtomicLoadOrdering","url":"\/documentation\/atomics\/atomicloadordering","abstract":[{"text":"Specifies the memory ordering semantics of an atomic load operation.","type":"text"}],"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"AtomicLoadOrdering","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"AtomicLoadOrdering"}],"title":"AtomicLoadOrdering","kind":"symbol","role":"symbol","type":"topic"}}}