{"abstract":[{"text":"Perform an atomic weak compare and exchange operation on the current","type":"text"},{"type":"text","text":" "},{"type":"text","text":"value, applying the specified success\/failure memory orderings. This"},{"type":"text","text":" "},{"text":"compare-exchange variant is allowed to spuriously fail; it is designed to","type":"text"},{"type":"text","text":" "},{"type":"text","text":"be called in a loop until it indicates a successful exchange has happened."}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/atomics\/unsafeatomic\/weakcompareexchange(expected:desired:successordering:failureordering:)"]}],"hierarchy":{"paths":[["doc:\/\/swift-atomics.Atomics\/documentation\/Atomics","doc:\/\/swift-atomics.Atomics\/documentation\/Atomics\/UnsafeAtomic"]]},"sections":[],"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"tokens":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"weakCompareExchange"},{"text":"(","kind":"text"},{"text":"expected","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Value","preciseIdentifier":"s:7Atomics12UnsafeAtomicV5Valuexmfp"},{"text":", ","kind":"text"},{"text":"desired","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:7Atomics12UnsafeAtomicV5Valuexmfp","text":"Value"},{"kind":"text","text":", "},{"kind":"externalParam","text":"successOrdering"},{"text":": ","kind":"text"},{"text":"AtomicUpdateOrdering","preciseIdentifier":"s:7Atomics20AtomicUpdateOrderingV","identifier":"doc:\/\/swift-atomics.Atomics\/documentation\/Atomics\/AtomicUpdateOrdering","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"failureOrdering","kind":"externalParam"},{"text":": ","kind":"text"},{"identifier":"doc:\/\/swift-atomics.Atomics\/documentation\/Atomics\/AtomicLoadOrdering","text":"AtomicLoadOrdering","preciseIdentifier":"s:7Atomics18AtomicLoadOrderingV","kind":"typeIdentifier"},{"text":") -> (exchanged","kind":"text"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"text":", original","kind":"text"},{"kind":"text","text":": "},{"text":"Value","kind":"typeIdentifier","preciseIdentifier":"s:7Atomics12UnsafeAtomicV5Valuexmfp"},{"text":")","kind":"text"}],"languages":["swift"]}]},{"parameters":[{"content":[{"inlineContent":[{"text":"The expected current value.","type":"text"}],"type":"paragraph"}],"name":"expected"},{"name":"desired","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The desired new value."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"The memory ordering to apply if this"},{"type":"text","text":" "},{"type":"text","text":"operation performs the exchange."}],"type":"paragraph"}],"name":"successOrdering"},{"name":"failureOrdering","content":[{"inlineContent":[{"type":"text","text":"The memory ordering to apply on this"},{"text":" ","type":"text"},{"text":"operation does not perform the exchange.","type":"text"}],"type":"paragraph"}]}],"kind":"parameters"},{"content":[{"type":"heading","anchor":"return-value","text":"Return Value","level":2},{"inlineContent":[{"type":"text","text":"A tuple "},{"type":"codeVoice","code":"(exchanged, original)"},{"type":"text","text":", where "},{"code":"exchanged","type":"codeVoice"},{"type":"text","text":" is true if"},{"text":" ","type":"text"},{"text":"the exchange was successful, and ","type":"text"},{"code":"original","type":"codeVoice"},{"type":"text","text":" is the original value."}],"type":"paragraph"}],"kind":"content"},{"kind":"content","content":[{"type":"heading","level":2,"anchor":"discussion","text":"Discussion"},{"type":"paragraph","inlineContent":[{"text":"This operation performs the following algorithm as a single atomic","type":"text"},{"type":"text","text":" "},{"text":"transaction:","type":"text"}]},{"type":"codeListing","syntax":null,"code":["atomic(self) { currentValue in","  let original = currentValue","  guard original == expected else { return (false, original) }","  currentValue = desired","  return (true, original)","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"(In this weak form, transient conditions may cause the "},{"type":"codeVoice","code":"original == expected"},{"type":"text","text":" check to sometimes return false when the two values are in fact"},{"text":" ","type":"text"},{"type":"text","text":"the same.)"}]},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"ordering","type":"codeVoice"},{"type":"text","text":" argument specifies the memory ordering to use when the"},{"text":" ","type":"text"},{"text":"operation manages to update the current value, while ","type":"text"},{"code":"failureOrdering","type":"codeVoice"},{"text":" ","type":"text"},{"text":"will be used when the operation leaves the value intact.","type":"text"}]}]}],"schemaVersion":{"minor":3,"patch":0,"major":0},"seeAlsoSections":[{"anchor":"Atomic-Operations","generated":true,"title":"Atomic Operations","identifiers":["doc:\/\/swift-atomics.Atomics\/documentation\/Atomics\/UnsafeAtomic\/load(ordering:)","doc:\/\/swift-atomics.Atomics\/documentation\/Atomics\/UnsafeAtomic\/store(_:ordering:)","doc:\/\/swift-atomics.Atomics\/documentation\/Atomics\/UnsafeAtomic\/exchange(_:ordering:)","doc:\/\/swift-atomics.Atomics\/documentation\/Atomics\/UnsafeAtomic\/compareExchange(expected:desired:ordering:)","doc:\/\/swift-atomics.Atomics\/documentation\/Atomics\/UnsafeAtomic\/compareExchange(expected:desired:successOrdering:failureOrdering:)","doc:\/\/swift-atomics.Atomics\/documentation\/Atomics\/UnsafeAtomic\/weakCompareExchange(expected:desired:ordering:)"]}],"kind":"symbol","metadata":{"externalID":"s:7Atomics12UnsafeAtomicV19weakCompareExchange8expected7desired15successOrdering07failureJ0Sb9exchanged_x8originaltx_xnAA0c6UpdateJ0VAA0c4LoadJ0VtF","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"weakCompareExchange","kind":"identifier"},{"kind":"text","text":"("},{"text":"expected","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:7Atomics12UnsafeAtomicV5Valuexmfp","text":"Value","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"desired"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:7Atomics12UnsafeAtomicV5Valuexmfp","text":"Value"},{"kind":"text","text":", "},{"text":"successOrdering","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"AtomicUpdateOrdering","preciseIdentifier":"s:7Atomics20AtomicUpdateOrderingV"},{"text":", ","kind":"text"},{"text":"failureOrdering","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:7Atomics18AtomicLoadOrderingV","kind":"typeIdentifier","text":"AtomicLoadOrdering"},{"text":") -> (exchanged","kind":"text"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"},{"kind":"text","text":", original"},{"kind":"text","text":": "},{"preciseIdentifier":"s:7Atomics12UnsafeAtomicV5Valuexmfp","text":"Value","kind":"typeIdentifier"},{"kind":"text","text":")"}],"role":"symbol","title":"weakCompareExchange(expected:desired:successOrdering:failureOrdering:)","extendedModule":"Atomics","conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Value"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"AtomicValue"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Value"},{"type":"text","text":" is "},{"code":"Value.AtomicRepresentation.Value","type":"codeVoice"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"roleHeading":"Instance Method","modules":[{"name":"Atomics"}],"symbolKind":"method"},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/swift-atomics.Atomics\/documentation\/Atomics\/UnsafeAtomic\/weakCompareExchange(expected:desired:successOrdering:failureOrdering:)"},"references":{"doc://swift-atomics.Atomics/documentation/Atomics/UnsafeAtomic/compareExchange(expected:desired:successOrdering:failureOrdering:)":{"type":"topic","title":"compareExchange(expected:desired:successOrdering:failureOrdering:)","url":"\/documentation\/atomics\/unsafeatomic\/compareexchange(expected:desired:successordering:failureordering:)","identifier":"doc:\/\/swift-atomics.Atomics\/documentation\/Atomics\/UnsafeAtomic\/compareExchange(expected:desired:successOrdering:failureOrdering:)","abstract":[{"type":"text","text":"Perform an atomic compare and exchange operation on the current value,"},{"text":" ","type":"text"},{"text":"applying the specified success\/failure memory orderings.","type":"text"}],"kind":"symbol","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"type":"codeVoice","code":"Value"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"AtomicValue"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Value"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Value.AtomicRepresentation.Value"},{"text":".","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"compareExchange","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"expected"},{"kind":"text","text":": "},{"text":"Value","kind":"typeIdentifier","preciseIdentifier":"s:7Atomics12UnsafeAtomicV5Valuexmfp"},{"text":", ","kind":"text"},{"text":"desired","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Value","kind":"typeIdentifier","preciseIdentifier":"s:7Atomics12UnsafeAtomicV5Valuexmfp"},{"kind":"text","text":", "},{"kind":"externalParam","text":"successOrdering"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:7Atomics20AtomicUpdateOrderingV","text":"AtomicUpdateOrdering","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"failureOrdering"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:7Atomics18AtomicLoadOrderingV","text":"AtomicLoadOrdering"},{"text":") -> (exchanged","kind":"text"},{"text":": ","kind":"text"},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"},{"kind":"text","text":", original"},{"text":": ","kind":"text"},{"text":"Value","kind":"typeIdentifier","preciseIdentifier":"s:7Atomics12UnsafeAtomicV5Valuexmfp"},{"text":")","kind":"text"}]},"doc://swift-atomics.Atomics/documentation/Atomics/AtomicUpdateOrdering":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"AtomicUpdateOrdering"}],"identifier":"doc:\/\/swift-atomics.Atomics\/documentation\/Atomics\/AtomicUpdateOrdering","url":"\/documentation\/atomics\/atomicupdateordering","kind":"symbol","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"AtomicUpdateOrdering"}],"type":"topic","abstract":[{"text":"Specifies the memory ordering semantics of an atomic read-modify-write","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"operation."}],"title":"AtomicUpdateOrdering"},"doc://swift-atomics.Atomics/documentation/Atomics/UnsafeAtomic/load(ordering:)":{"identifier":"doc:\/\/swift-atomics.Atomics\/documentation\/Atomics\/UnsafeAtomic\/load(ordering:)","conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Value"},{"type":"text","text":" conforms to "},{"code":"AtomicValue","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Value"},{"text":" is ","type":"text"},{"code":"Value.AtomicRepresentation.Value","type":"codeVoice"},{"type":"text","text":"."}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"abstract":[{"text":"Atomically loads and returns the current value, applying the specified","type":"text"},{"type":"text","text":" "},{"text":"memory ordering.","type":"text"}],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"load","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"ordering"},{"text":": ","kind":"text"},{"text":"AtomicLoadOrdering","kind":"typeIdentifier","preciseIdentifier":"s:7Atomics18AtomicLoadOrderingV"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:7Atomics12UnsafeAtomicV5Valuexmfp","kind":"typeIdentifier","text":"Value"}],"title":"load(ordering:)","url":"\/documentation\/atomics\/unsafeatomic\/load(ordering:)","type":"topic","role":"symbol","kind":"symbol"},"doc://swift-atomics.Atomics/documentation/Atomics":{"identifier":"doc:\/\/swift-atomics.Atomics\/documentation\/Atomics","url":"\/documentation\/atomics","abstract":[{"type":"text","text":"An atomics library for Swift."}],"title":"Atomics","kind":"symbol","role":"collection","type":"topic"},"doc://swift-atomics.Atomics/documentation/Atomics/UnsafeAtomic/compareExchange(expected:desired:ordering:)":{"title":"compareExchange(expected:desired:ordering:)","role":"symbol","kind":"symbol","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"code":"Value","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"AtomicValue"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Value"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Value.AtomicRepresentation.Value"},{"type":"text","text":"."}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"abstract":[{"text":"Perform an atomic compare and exchange operation on the current value,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"applying the specified memory ordering."}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"compareExchange","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"expected"},{"text":": ","kind":"text"},{"text":"Value","kind":"typeIdentifier","preciseIdentifier":"s:7Atomics12UnsafeAtomicV5Valuexmfp"},{"text":", ","kind":"text"},{"text":"desired","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:7Atomics12UnsafeAtomicV5Valuexmfp","kind":"typeIdentifier","text":"Value"},{"kind":"text","text":", "},{"kind":"externalParam","text":"ordering"},{"kind":"text","text":": "},{"preciseIdentifier":"s:7Atomics20AtomicUpdateOrderingV","kind":"typeIdentifier","text":"AtomicUpdateOrdering"},{"text":") -> (exchanged","kind":"text"},{"kind":"text","text":": "},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"kind":"text","text":", original"},{"text":": ","kind":"text"},{"text":"Value","preciseIdentifier":"s:7Atomics12UnsafeAtomicV5Valuexmfp","kind":"typeIdentifier"},{"text":")","kind":"text"}],"type":"topic","identifier":"doc:\/\/swift-atomics.Atomics\/documentation\/Atomics\/UnsafeAtomic\/compareExchange(expected:desired:ordering:)","url":"\/documentation\/atomics\/unsafeatomic\/compareexchange(expected:desired:ordering:)"},"doc://swift-atomics.Atomics/documentation/Atomics/UnsafeAtomic/store(_:ordering:)":{"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"store"},{"kind":"text","text":"("},{"text":"Value","kind":"typeIdentifier","preciseIdentifier":"s:7Atomics12UnsafeAtomicV5Valuexmfp"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"ordering"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:7Atomics19AtomicStoreOrderingV","text":"AtomicStoreOrdering"},{"kind":"text","text":")"}],"kind":"symbol","url":"\/documentation\/atomics\/unsafeatomic\/store(_:ordering:)","title":"store(_:ordering:)","role":"symbol","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"code":"Value","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"AtomicValue"},{"text":" and ","type":"text"},{"code":"Value","type":"codeVoice"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Value.AtomicRepresentation.Value"},{"text":".","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"abstract":[{"type":"text","text":"Atomically sets the current value to "},{"code":"desired","type":"codeVoice"},{"text":", applying the specified","type":"text"},{"type":"text","text":" "},{"type":"text","text":"memory ordering."}],"type":"topic","identifier":"doc:\/\/swift-atomics.Atomics\/documentation\/Atomics\/UnsafeAtomic\/store(_:ordering:)"},"doc://swift-atomics.Atomics/documentation/Atomics/AtomicLoadOrdering":{"identifier":"doc:\/\/swift-atomics.Atomics\/documentation\/Atomics\/AtomicLoadOrdering","url":"\/documentation\/atomics\/atomicloadordering","abstract":[{"text":"Specifies the memory ordering semantics of an atomic load operation.","type":"text"}],"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"AtomicLoadOrdering","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"AtomicLoadOrdering"}],"title":"AtomicLoadOrdering","kind":"symbol","role":"symbol","type":"topic"},"doc://swift-atomics.Atomics/documentation/Atomics/UnsafeAtomic":{"url":"\/documentation\/atomics\/unsafeatomic","title":"UnsafeAtomic","navigatorTitle":[{"kind":"identifier","text":"UnsafeAtomic"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"UnsafeAtomic"}],"abstract":[{"text":"An unsafe reference type holding an atomic value, requiring manual memory","type":"text"},{"type":"text","text":" "},{"text":"management of the underlying storage representation.","type":"text"}],"kind":"symbol","type":"topic","role":"symbol","identifier":"doc:\/\/swift-atomics.Atomics\/documentation\/Atomics\/UnsafeAtomic"},"doc://swift-atomics.Atomics/documentation/Atomics/UnsafeAtomic/weakCompareExchange(expected:desired:successOrdering:failureOrdering:)":{"abstract":[{"text":"Perform an atomic weak compare and exchange operation on the current","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"value, applying the specified success\/failure memory orderings. This"},{"type":"text","text":" "},{"text":"compare-exchange variant is allowed to spuriously fail; it is designed to","type":"text"},{"type":"text","text":" "},{"text":"be called in a loop until it indicates a successful exchange has happened.","type":"text"}],"conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"Value"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"AtomicValue"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Value"},{"type":"text","text":" is "},{"code":"Value.AtomicRepresentation.Value","type":"codeVoice"},{"type":"text","text":"."}]},"role":"symbol","url":"\/documentation\/atomics\/unsafeatomic\/weakcompareexchange(expected:desired:successordering:failureordering:)","type":"topic","title":"weakCompareExchange(expected:desired:successOrdering:failureOrdering:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"weakCompareExchange","kind":"identifier"},{"text":"(","kind":"text"},{"text":"expected","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:7Atomics12UnsafeAtomicV5Valuexmfp","text":"Value","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"desired","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Value","kind":"typeIdentifier","preciseIdentifier":"s:7Atomics12UnsafeAtomicV5Valuexmfp"},{"kind":"text","text":", "},{"text":"successOrdering","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"AtomicUpdateOrdering","preciseIdentifier":"s:7Atomics20AtomicUpdateOrderingV","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"failureOrdering","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"AtomicLoadOrdering","kind":"typeIdentifier","preciseIdentifier":"s:7Atomics18AtomicLoadOrderingV"},{"kind":"text","text":") -> (exchanged"},{"text":": ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"text":", original","kind":"text"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:7Atomics12UnsafeAtomicV5Valuexmfp","text":"Value","kind":"typeIdentifier"},{"text":")","kind":"text"}],"kind":"symbol","identifier":"doc:\/\/swift-atomics.Atomics\/documentation\/Atomics\/UnsafeAtomic\/weakCompareExchange(expected:desired:successOrdering:failureOrdering:)"},"doc://swift-atomics.Atomics/documentation/Atomics/UnsafeAtomic/weakCompareExchange(expected:desired:ordering:)":{"kind":"symbol","type":"topic","abstract":[{"type":"text","text":"Perform an atomic weak compare and exchange operation on the current"},{"type":"text","text":" "},{"type":"text","text":"value, applying the memory ordering. This compare-exchange variant is"},{"text":" ","type":"text"},{"type":"text","text":"allowed to spuriously fail; it is designed to be called in a loop until"},{"text":" ","type":"text"},{"type":"text","text":"it indicates a successful exchange has happened."}],"role":"symbol","title":"weakCompareExchange(expected:desired:ordering:)","identifier":"doc:\/\/swift-atomics.Atomics\/documentation\/Atomics\/UnsafeAtomic\/weakCompareExchange(expected:desired:ordering:)","url":"\/documentation\/atomics\/unsafeatomic\/weakcompareexchange(expected:desired:ordering:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"weakCompareExchange","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"expected"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:7Atomics12UnsafeAtomicV5Valuexmfp","text":"Value"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"desired"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:7Atomics12UnsafeAtomicV5Valuexmfp","text":"Value","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"ordering","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:7Atomics20AtomicUpdateOrderingV","kind":"typeIdentifier","text":"AtomicUpdateOrdering"},{"kind":"text","text":") -> (exchanged"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"text":", original","kind":"text"},{"text":": ","kind":"text"},{"text":"Value","preciseIdentifier":"s:7Atomics12UnsafeAtomicV5Valuexmfp","kind":"typeIdentifier"},{"kind":"text","text":")"}],"conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"Value","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"AtomicValue"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Value"},{"text":" is ","type":"text"},{"code":"Value.AtomicRepresentation.Value","type":"codeVoice"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}]}},"doc://swift-atomics.Atomics/documentation/Atomics/UnsafeAtomic/exchange(_:ordering:)":{"title":"exchange(_:ordering:)","role":"symbol","kind":"symbol","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"Value"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"AtomicValue"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Value"},{"text":" is ","type":"text"},{"code":"Value.AtomicRepresentation.Value","type":"codeVoice"},{"type":"text","text":"."}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"abstract":[{"type":"text","text":"Atomically sets the current value to "},{"code":"desired","type":"codeVoice"},{"type":"text","text":" and returns the original"},{"text":" ","type":"text"},{"text":"value, applying the specified memory ordering.","type":"text"}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"exchange"},{"kind":"text","text":"("},{"text":"Value","kind":"typeIdentifier","preciseIdentifier":"s:7Atomics12UnsafeAtomicV5Valuexmfp"},{"text":", ","kind":"text"},{"text":"ordering","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:7Atomics20AtomicUpdateOrderingV","text":"AtomicUpdateOrdering","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"text":"Value","kind":"typeIdentifier","preciseIdentifier":"s:7Atomics12UnsafeAtomicV5Valuexmfp"}],"identifier":"doc:\/\/swift-atomics.Atomics\/documentation\/Atomics\/UnsafeAtomic\/exchange(_:ordering:)","type":"topic","url":"\/documentation\/atomics\/unsafeatomic\/exchange(_:ordering:)"}}}