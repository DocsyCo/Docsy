{"schemaVersion":{"major":0,"minor":3,"patch":0},"kind":"symbol","primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"atomicWeakCompareExchange"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"expected"},{"text":": ","kind":"text"},{"text":"Value","kind":"typeIdentifier","preciseIdentifier":"s:s9UnmanagedV7AtomicsE28AtomicOptionalRepresentationV5Valuea","identifier":"doc:\/\/swift-atomics.Atomics\/documentation\/Atomics\/Swift\/Unmanaged\/AtomicOptionalRepresentation\/Value"},{"kind":"text","text":", "},{"text":"desired","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:s9UnmanagedV7AtomicsE28AtomicOptionalRepresentationV5Valuea","kind":"typeIdentifier","identifier":"doc:\/\/swift-atomics.Atomics\/documentation\/Atomics\/Swift\/Unmanaged\/AtomicOptionalRepresentation\/Value","text":"Value"},{"text":", ","kind":"text"},{"text":"at","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"pointer","kind":"internalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Sp","text":"UnsafeMutablePointer","kind":"typeIdentifier"},{"kind":"text","text":"<`Self`"},{"text":">, ","kind":"text"},{"kind":"externalParam","text":"successOrdering"},{"text":": ","kind":"text"},{"text":"AtomicUpdateOrdering","kind":"typeIdentifier","preciseIdentifier":"s:7Atomics20AtomicUpdateOrderingV","identifier":"doc:\/\/swift-atomics.Atomics\/documentation\/Atomics\/AtomicUpdateOrdering"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"failureOrdering"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","identifier":"doc:\/\/swift-atomics.Atomics\/documentation\/Atomics\/AtomicLoadOrdering","preciseIdentifier":"s:7Atomics18AtomicLoadOrderingV","text":"AtomicLoadOrdering"},{"kind":"text","text":") -> (exchanged"},{"text":": ","kind":"text"},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"},{"text":", original","kind":"text"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:s9UnmanagedV7AtomicsE28AtomicOptionalRepresentationV5Valuea","text":"Value","identifier":"doc:\/\/swift-atomics.Atomics\/documentation\/Atomics\/Swift\/Unmanaged\/AtomicOptionalRepresentation\/Value"},{"kind":"text","text":")"}],"platforms":["macOS"],"languages":["swift"]}]},{"parameters":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The expected current value."}]}],"name":"expected"},{"name":"desired","content":[{"inlineContent":[{"text":"The desired new value.","type":"text"}],"type":"paragraph"}]},{"name":"pointer","content":[{"inlineContent":[{"type":"text","text":"A memory location previously initialized with a value"},{"text":" ","type":"text"},{"type":"text","text":"returned by "},{"type":"codeVoice","code":"prepareAtomicRepresentation(for:)"},{"text":".","type":"text"}],"type":"paragraph"}]},{"name":"successOrdering","content":[{"type":"paragraph","inlineContent":[{"text":"The memory ordering to apply if this","type":"text"},{"type":"text","text":" "},{"text":"operation performs the exchange.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The memory ordering to apply on this"},{"type":"text","text":" "},{"text":"operation does not perform the exchange.","type":"text"}]}],"name":"failureOrdering"}],"kind":"parameters"},{"kind":"content","content":[{"anchor":"return-value","type":"heading","level":2,"text":"Return Value"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A tuple "},{"type":"codeVoice","code":"(exchanged, original)"},{"type":"text","text":", where "},{"code":"exchanged","type":"codeVoice"},{"type":"text","text":" is true if"},{"type":"text","text":" "},{"text":"the exchange was successful, and ","type":"text"},{"type":"codeVoice","code":"original"},{"text":" is the original value.","type":"text"}]}]},{"content":[{"level":2,"anchor":"discussion","text":"Discussion","type":"heading"},{"inlineContent":[{"type":"text","text":"This operation performs the following algorithm as a single atomic"},{"type":"text","text":" "},{"text":"transaction:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":null,"code":["atomic(self) { currentValue in","  let original = currentValue","  guard original == expected else { return (false, original) }","  currentValue = desired","  return (true, original)","}"]},{"type":"paragraph","inlineContent":[{"text":"(In this weak form, transient conditions may cause the ","type":"text"},{"type":"codeVoice","code":"original == expected"},{"type":"text","text":" check to sometimes return false when the two values are in fact"},{"type":"text","text":" "},{"type":"text","text":"the same.)"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"code":"successOrdering","type":"codeVoice"},{"text":" argument specifies the memory ordering to use when the","type":"text"},{"text":" ","type":"text"},{"text":"operation manages to update the current value, while ","type":"text"},{"code":"failureOrdering","type":"codeVoice"},{"text":" ","type":"text"},{"text":"will be used when the operation leaves the value intact.","type":"text"}]}],"kind":"content"}],"metadata":{"fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"atomicWeakCompareExchange"},{"kind":"text","text":"("},{"kind":"externalParam","text":"expected"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:s9UnmanagedV7AtomicsE28AtomicOptionalRepresentationV5Valuea","kind":"typeIdentifier","text":"Value"},{"kind":"text","text":", "},{"text":"desired","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:s9UnmanagedV7AtomicsE28AtomicOptionalRepresentationV5Valuea","text":"Value"},{"kind":"text","text":", "},{"kind":"externalParam","text":"at"},{"text":": ","kind":"text"},{"text":"UnsafeMutablePointer","kind":"typeIdentifier","preciseIdentifier":"s:Sp"},{"text":"<`Self`","kind":"text"},{"text":">, ","kind":"text"},{"text":"successOrdering","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:7Atomics20AtomicUpdateOrderingV","text":"AtomicUpdateOrdering"},{"kind":"text","text":", "},{"kind":"externalParam","text":"failureOrdering"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"AtomicLoadOrdering","preciseIdentifier":"s:7Atomics18AtomicLoadOrderingV"},{"kind":"text","text":") -> (exchanged"},{"text":": ","kind":"text"},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"},{"text":", original","kind":"text"},{"kind":"text","text":": "},{"preciseIdentifier":"s:s9UnmanagedV7AtomicsE28AtomicOptionalRepresentationV5Valuea","kind":"typeIdentifier","text":"Value"},{"text":")","kind":"text"}],"externalID":"s:s9UnmanagedV7AtomicsE28AtomicOptionalRepresentationV25atomicWeakCompareExchange8expected7desired2at15successOrdering07failureN0Sb9exchanged_AByxGSg8originaltAN_ANSpyAEyx_GGAC0c6UpdateN0VAC0c4LoadN0VtFZ","role":"symbol","symbolKind":"method","title":"atomicWeakCompareExchange(expected:desired:at:successOrdering:failureOrdering:)","extendedModule":"Atomics","roleHeading":"Type Method","modules":[{"name":"Atomics"}]},"abstract":[{"text":"Perform an atomic weak compare and exchange operation on the value","type":"text"},{"type":"text","text":" "},{"text":"referenced by ","type":"text"},{"code":"pointer","type":"codeVoice"},{"type":"text","text":", applying the specified success\/failure memory"},{"type":"text","text":" "},{"type":"text","text":"orderings. This compare-exchange variant is allowed to spuriously fail; it"},{"type":"text","text":" "},{"text":"is designed to be called in a loop until it indicates a successful","type":"text"},{"text":" ","type":"text"},{"text":"exchange has happened.","type":"text"}],"hierarchy":{"paths":[["doc:\/\/swift-atomics.Atomics\/documentation\/Atomics","doc:\/\/swift-atomics.Atomics\/documentation\/Atomics\/Swift","doc:\/\/swift-atomics.Atomics\/documentation\/Atomics\/Swift\/Unmanaged","doc:\/\/swift-atomics.Atomics\/documentation\/Atomics\/Swift\/Unmanaged\/AtomicOptionalWrappable-Implementations","doc:\/\/swift-atomics.Atomics\/documentation\/Atomics\/Swift\/Unmanaged\/AtomicOptionalRepresentation","doc:\/\/swift-atomics.Atomics\/documentation\/Atomics\/Swift\/Unmanaged\/AtomicOptionalRepresentation\/AtomicStorage-Implementations"]]},"identifier":{"url":"doc:\/\/swift-atomics.Atomics\/documentation\/Atomics\/Swift\/Unmanaged\/AtomicOptionalRepresentation\/atomicWeakCompareExchange(expected:desired:at:successOrdering:failureOrdering:)","interfaceLanguage":"swift"},"sections":[],"variants":[{"paths":["\/documentation\/atomics\/swift\/unmanaged\/atomicoptionalrepresentation\/atomicweakcompareexchange(expected:desired:at:successordering:failureordering:)"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://swift-atomics.Atomics/documentation/Atomics/Swift/Unmanaged/AtomicOptionalRepresentation/atomicWeakCompareExchange(expected:desired:at:successOrdering:failureOrdering:)":{"type":"topic","url":"\/documentation\/atomics\/swift\/unmanaged\/atomicoptionalrepresentation\/atomicweakcompareexchange(expected:desired:at:successordering:failureordering:)","identifier":"doc:\/\/swift-atomics.Atomics\/documentation\/Atomics\/Swift\/Unmanaged\/AtomicOptionalRepresentation\/atomicWeakCompareExchange(expected:desired:at:successOrdering:failureOrdering:)","kind":"symbol","title":"atomicWeakCompareExchange(expected:desired:at:successOrdering:failureOrdering:)","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"atomicWeakCompareExchange","kind":"identifier"},{"kind":"text","text":"("},{"text":"expected","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:s9UnmanagedV7AtomicsE28AtomicOptionalRepresentationV5Valuea","kind":"typeIdentifier","text":"Value"},{"kind":"text","text":", "},{"text":"desired","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:s9UnmanagedV7AtomicsE28AtomicOptionalRepresentationV5Valuea","kind":"typeIdentifier","text":"Value"},{"kind":"text","text":", "},{"text":"at","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Sp","text":"UnsafeMutablePointer","kind":"typeIdentifier"},{"text":"<`Self`","kind":"text"},{"text":">, ","kind":"text"},{"text":"successOrdering","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"AtomicUpdateOrdering","preciseIdentifier":"s:7Atomics20AtomicUpdateOrderingV"},{"text":", ","kind":"text"},{"text":"failureOrdering","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"AtomicLoadOrdering","kind":"typeIdentifier","preciseIdentifier":"s:7Atomics18AtomicLoadOrderingV"},{"text":") -> (exchanged","kind":"text"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"},{"text":", original","kind":"text"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:s9UnmanagedV7AtomicsE28AtomicOptionalRepresentationV5Valuea","text":"Value"},{"kind":"text","text":")"}],"abstract":[{"text":"Perform an atomic weak compare and exchange operation on the value","type":"text"},{"type":"text","text":" "},{"type":"text","text":"referenced by "},{"code":"pointer","type":"codeVoice"},{"type":"text","text":", applying the specified success\/failure memory"},{"text":" ","type":"text"},{"text":"orderings. This compare-exchange variant is allowed to spuriously fail; it","type":"text"},{"type":"text","text":" "},{"text":"is designed to be called in a loop until it indicates a successful","type":"text"},{"text":" ","type":"text"},{"text":"exchange has happened.","type":"text"}],"role":"symbol"},"doc://swift-atomics.Atomics/documentation/Atomics":{"identifier":"doc:\/\/swift-atomics.Atomics\/documentation\/Atomics","url":"\/documentation\/atomics","abstract":[{"type":"text","text":"An atomics library for Swift."}],"title":"Atomics","kind":"symbol","role":"collection","type":"topic"},"doc://swift-atomics.Atomics/documentation/Atomics/Swift/Unmanaged":{"identifier":"doc:\/\/swift-atomics.Atomics\/documentation\/Atomics\/Swift\/Unmanaged","title":"Unmanaged","navigatorTitle":[{"kind":"identifier","text":"Unmanaged"}],"abstract":[],"kind":"symbol","fragments":[{"text":"extension","kind":"keyword"},{"kind":"text","text":" "},{"preciseIdentifier":"s:s9UnmanagedV","kind":"identifier","text":"Unmanaged"}],"url":"\/documentation\/atomics\/swift\/unmanaged","type":"topic","role":"symbol"},"doc://swift-atomics.Atomics/documentation/Atomics/Swift/Unmanaged/AtomicOptionalWrappable-Implementations":{"type":"topic","identifier":"doc:\/\/swift-atomics.Atomics\/documentation\/Atomics\/Swift\/Unmanaged\/AtomicOptionalWrappable-Implementations","abstract":[],"title":"AtomicOptionalWrappable Implementations","url":"\/documentation\/atomics\/swift\/unmanaged\/atomicoptionalwrappable-implementations","role":"collectionGroup","kind":"article"},"doc://swift-atomics.Atomics/documentation/Atomics/Swift/Unmanaged/AtomicOptionalRepresentation":{"role":"symbol","type":"topic","url":"\/documentation\/atomics\/swift\/unmanaged\/atomicoptionalrepresentation","abstract":[{"type":"text","text":"The atomic storage representation for "},{"code":"Optional<Self>","type":"codeVoice"},{"type":"text","text":"."}],"kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"AtomicOptionalRepresentation","kind":"identifier"}],"navigatorTitle":[{"text":"AtomicOptionalRepresentation","kind":"identifier"}],"title":"Unmanaged.AtomicOptionalRepresentation","identifier":"doc:\/\/swift-atomics.Atomics\/documentation\/Atomics\/Swift\/Unmanaged\/AtomicOptionalRepresentation"},"doc://swift-atomics.Atomics/documentation/Atomics/Swift/Unmanaged/AtomicOptionalRepresentation/Value":{"type":"topic","url":"\/documentation\/atomics\/swift\/unmanaged\/atomicoptionalrepresentation\/value","identifier":"doc:\/\/swift-atomics.Atomics\/documentation\/Atomics\/Swift\/Unmanaged\/AtomicOptionalRepresentation\/Value","title":"Unmanaged.AtomicOptionalRepresentation.Value","kind":"symbol","navigatorTitle":[{"text":"Value","kind":"identifier"}],"fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Value","kind":"identifier"}],"abstract":[{"type":"text","text":"The type whose values this storage representation is representing."}],"role":"symbol"},"doc://swift-atomics.Atomics/documentation/Atomics/AtomicLoadOrdering":{"identifier":"doc:\/\/swift-atomics.Atomics\/documentation\/Atomics\/AtomicLoadOrdering","url":"\/documentation\/atomics\/atomicloadordering","abstract":[{"text":"Specifies the memory ordering semantics of an atomic load operation.","type":"text"}],"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"AtomicLoadOrdering","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"AtomicLoadOrdering"}],"title":"AtomicLoadOrdering","kind":"symbol","role":"symbol","type":"topic"},"doc://swift-atomics.Atomics/documentation/Atomics/Swift":{"type":"topic","abstract":[],"role":"collection","identifier":"doc:\/\/swift-atomics.Atomics\/documentation\/Atomics\/Swift","url":"\/documentation\/atomics\/swift","kind":"symbol","title":"Swift"},"doc://swift-atomics.Atomics/documentation/Atomics/Swift/Unmanaged/AtomicOptionalRepresentation/AtomicStorage-Implementations":{"role":"collectionGroup","type":"topic","identifier":"doc:\/\/swift-atomics.Atomics\/documentation\/Atomics\/Swift\/Unmanaged\/AtomicOptionalRepresentation\/AtomicStorage-Implementations","abstract":[],"title":"AtomicStorage Implementations","kind":"article","url":"\/documentation\/atomics\/swift\/unmanaged\/atomicoptionalrepresentation\/atomicstorage-implementations"},"doc://swift-atomics.Atomics/documentation/Atomics/AtomicUpdateOrdering":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"AtomicUpdateOrdering"}],"identifier":"doc:\/\/swift-atomics.Atomics\/documentation\/Atomics\/AtomicUpdateOrdering","url":"\/documentation\/atomics\/atomicupdateordering","kind":"symbol","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"AtomicUpdateOrdering"}],"type":"topic","abstract":[{"text":"Specifies the memory ordering semantics of an atomic read-modify-write","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"operation."}],"title":"AtomicUpdateOrdering"}}}