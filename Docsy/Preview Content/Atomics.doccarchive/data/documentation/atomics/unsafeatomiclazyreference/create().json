{"kind":"symbol","sections":[],"seeAlsoSections":[{"title":"Shorthand Methods for Dynamically Allocating Storage","generated":true,"identifiers":["doc:\/\/swift-atomics.Atomics\/documentation\/Atomics\/UnsafeAtomicLazyReference\/destroy()"],"anchor":"Shorthand-Methods-for-Dynamically-Allocating-Storage"}],"abstract":[{"type":"text","text":"Create a new "},{"type":"codeVoice","code":"UnsafeAtomicLazyReference"},{"text":" value by dynamically allocating","type":"text"},{"type":"text","text":" "},{"text":"storage for it.","type":"text"}],"primaryContentSections":[{"declarations":[{"platforms":["macOS"],"tokens":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"create","kind":"identifier"},{"text":"() -> ","kind":"text"},{"identifier":"doc:\/\/swift-atomics.Atomics\/documentation\/Atomics\/UnsafeAtomicLazyReference","preciseIdentifier":"s:7Atomics25UnsafeAtomicLazyReferenceV","text":"UnsafeAtomicLazyReference","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Instance","kind":"typeIdentifier"},{"text":">","kind":"text"}],"languages":["swift"]}],"kind":"declarations"},{"content":[{"text":"Discussion","level":2,"anchor":"discussion","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This call is usually paired with "},{"type":"codeVoice","code":"destroy"},{"text":" to get rid of the allocated","type":"text"},{"type":"text","text":" "},{"type":"text","text":"storage at the end of its lifetime."}]},{"type":"paragraph","inlineContent":[{"text":"Note: This is not an atomic operation.","type":"text"}]}],"kind":"content"}],"metadata":{"roleHeading":"Type Method","role":"symbol","symbolKind":"method","extendedModule":"Atomics","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"create","kind":"identifier"},{"kind":"text","text":"() -> "},{"preciseIdentifier":"s:7Atomics25UnsafeAtomicLazyReferenceV","kind":"typeIdentifier","text":"UnsafeAtomicLazyReference"},{"text":"<","kind":"text"},{"text":"Instance","kind":"typeIdentifier"},{"text":">","kind":"text"}],"title":"create()","modules":[{"name":"Atomics"}],"externalID":"s:7Atomics25UnsafeAtomicLazyReferenceV6createACyxGyFZ"},"hierarchy":{"paths":[["doc:\/\/swift-atomics.Atomics\/documentation\/Atomics","doc:\/\/swift-atomics.Atomics\/documentation\/Atomics\/UnsafeAtomicLazyReference"]]},"identifier":{"url":"doc:\/\/swift-atomics.Atomics\/documentation\/Atomics\/UnsafeAtomicLazyReference\/create()","interfaceLanguage":"swift"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/atomics\/unsafeatomiclazyreference\/create()"]}],"schemaVersion":{"patch":0,"minor":3,"major":0},"references":{"doc://swift-atomics.Atomics/documentation/Atomics/UnsafeAtomicLazyReference/destroy()":{"abstract":[{"text":"Disposes of the current value of the storage location corresponding to","type":"text"},{"type":"text","text":" "},{"text":"this unsafe atomic lazy reference, then deinitializes and deallocates the","type":"text"},{"type":"text","text":" "},{"text":"storage.","type":"text"}],"url":"\/documentation\/atomics\/unsafeatomiclazyreference\/destroy()","type":"topic","identifier":"doc:\/\/swift-atomics.Atomics\/documentation\/Atomics\/UnsafeAtomicLazyReference\/destroy()","kind":"symbol","title":"destroy()","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"destroy","kind":"identifier"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:7Atomics25UnsafeAtomicLazyReferenceV5Valuea","text":"Value"}],"role":"symbol"},"doc://swift-atomics.Atomics/documentation/Atomics/UnsafeAtomicLazyReference/create()":{"type":"topic","title":"create()","identifier":"doc:\/\/swift-atomics.Atomics\/documentation\/Atomics\/UnsafeAtomicLazyReference\/create()","role":"symbol","abstract":[{"type":"text","text":"Create a new "},{"type":"codeVoice","code":"UnsafeAtomicLazyReference"},{"text":" value by dynamically allocating","type":"text"},{"type":"text","text":" "},{"type":"text","text":"storage for it."}],"kind":"symbol","fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"create","kind":"identifier"},{"kind":"text","text":"() -> "},{"preciseIdentifier":"s:7Atomics25UnsafeAtomicLazyReferenceV","text":"UnsafeAtomicLazyReference","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Instance","kind":"typeIdentifier"},{"kind":"text","text":">"}],"url":"\/documentation\/atomics\/unsafeatomiclazyreference\/create()"},"doc://swift-atomics.Atomics/documentation/Atomics":{"identifier":"doc:\/\/swift-atomics.Atomics\/documentation\/Atomics","url":"\/documentation\/atomics","abstract":[{"type":"text","text":"An atomics library for Swift."}],"title":"Atomics","kind":"symbol","role":"collection","type":"topic"},"doc://swift-atomics.Atomics/documentation/Atomics/UnsafeAtomicLazyReference":{"type":"topic","abstract":[{"text":"An unsafe reference type holding a lazily initializable atomic","type":"text"},{"type":"text","text":" "},{"type":"text","text":"strong reference, requiring manual memory management of the"},{"text":" ","type":"text"},{"text":"underlying storage representation.","type":"text"}],"identifier":"doc:\/\/swift-atomics.Atomics\/documentation\/Atomics\/UnsafeAtomicLazyReference","navigatorTitle":[{"text":"UnsafeAtomicLazyReference","kind":"identifier"}],"kind":"symbol","title":"UnsafeAtomicLazyReference","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"UnsafeAtomicLazyReference","kind":"identifier"}],"url":"\/documentation\/atomics\/unsafeatomiclazyreference"}}}