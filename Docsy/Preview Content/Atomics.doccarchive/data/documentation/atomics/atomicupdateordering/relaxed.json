{"abstract":[{"type":"text","text":"Guarantees the atomicity of the specific operation on which it is applied,"},{"text":" ","type":"text"},{"type":"text","text":"but imposes no ordering constraints on any other variable accesses."}],"schemaVersion":{"minor":3,"patch":0,"major":0},"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"tokens":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"text":"relaxed","kind":"identifier"},{"kind":"text","text":": `Self`"},{"kind":"text","text":" { "},{"kind":"keyword","text":"get"},{"text":" }","kind":"text"}],"languages":["swift"]}]},{"kind":"content","content":[{"level":2,"anchor":"discussion","type":"heading","text":"Discussion"},{"inlineContent":[{"type":"text","text":"This value corresponds to "},{"type":"codeVoice","code":"std::memory_order_relaxed"},{"text":" in C++.","type":"text"}],"type":"paragraph"}]}],"metadata":{"roleHeading":"Type Property","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"text":"relaxed","kind":"identifier"},{"text":": `Self`","kind":"text"}],"role":"symbol","extendedModule":"Atomics","externalID":"s:7Atomics20AtomicUpdateOrderingV7relaxedACvpZ","title":"relaxed","modules":[{"name":"Atomics"}],"symbolKind":"property"},"identifier":{"url":"doc:\/\/swift-atomics.Atomics\/documentation\/Atomics\/AtomicUpdateOrdering\/relaxed","interfaceLanguage":"swift"},"seeAlsoSections":[{"title":"Ordering Values","identifiers":["doc:\/\/swift-atomics.Atomics\/documentation\/Atomics\/AtomicUpdateOrdering\/acquiring","doc:\/\/swift-atomics.Atomics\/documentation\/Atomics\/AtomicUpdateOrdering\/releasing","doc:\/\/swift-atomics.Atomics\/documentation\/Atomics\/AtomicUpdateOrdering\/acquiringAndReleasing","doc:\/\/swift-atomics.Atomics\/documentation\/Atomics\/AtomicUpdateOrdering\/sequentiallyConsistent"],"generated":true,"anchor":"Ordering-Values"}],"kind":"symbol","variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/atomics\/atomicupdateordering\/relaxed"]}],"sections":[],"hierarchy":{"paths":[["doc:\/\/swift-atomics.Atomics\/documentation\/Atomics","doc:\/\/swift-atomics.Atomics\/documentation\/Atomics\/AtomicUpdateOrdering"]]},"references":{"doc://swift-atomics.Atomics/documentation/Atomics/AtomicUpdateOrdering/acquiring":{"kind":"symbol","identifier":"doc:\/\/swift-atomics.Atomics\/documentation\/Atomics\/AtomicUpdateOrdering\/acquiring","type":"topic","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"text":"acquiring","kind":"identifier"},{"text":": `Self`","kind":"text"}],"role":"symbol","title":"acquiring","url":"\/documentation\/atomics\/atomicupdateordering\/acquiring","abstract":[{"type":"text","text":"An acquiring update synchronizes with a releasing operation"},{"type":"text","text":" "},{"type":"text","text":"whose value its reads. It ensures that the releasing and"},{"text":" ","type":"text"},{"type":"text","text":"acquiring threads agree that all subsequent variable accesses on"},{"type":"text","text":" "},{"text":"the acquring thread happen after the atomic operation itself.","type":"text"}]},"doc://swift-atomics.Atomics/documentation/Atomics/AtomicUpdateOrdering/relaxed":{"kind":"symbol","identifier":"doc:\/\/swift-atomics.Atomics\/documentation\/Atomics\/AtomicUpdateOrdering\/relaxed","type":"topic","fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"relaxed","kind":"identifier"},{"kind":"text","text":": `Self`"}],"role":"symbol","title":"relaxed","url":"\/documentation\/atomics\/atomicupdateordering\/relaxed","abstract":[{"text":"Guarantees the atomicity of the specific operation on which it is applied,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"but imposes no ordering constraints on any other variable accesses."}]},"doc://swift-atomics.Atomics/documentation/Atomics/AtomicUpdateOrdering/sequentiallyConsistent":{"url":"\/documentation\/atomics\/atomicupdateordering\/sequentiallyconsistent","type":"topic","fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"text":"sequentiallyConsistent","kind":"identifier"},{"text":": `Self`","kind":"text"}],"kind":"symbol","abstract":[{"text":"A sequentially consistent update performs an","type":"text"},{"type":"text","text":" "},{"type":"text","text":"acquiring-and-releasing update and also guarantees that it and"},{"text":" ","type":"text"},{"type":"text","text":"all other sequentially consistent atomic operations (loads, stores,"},{"type":"text","text":" "},{"type":"text","text":"updates) appear to be executed in a single, total sequential"},{"text":" ","type":"text"},{"type":"text","text":"ordering."}],"role":"symbol","title":"sequentiallyConsistent","identifier":"doc:\/\/swift-atomics.Atomics\/documentation\/Atomics\/AtomicUpdateOrdering\/sequentiallyConsistent"},"doc://swift-atomics.Atomics/documentation/Atomics/AtomicUpdateOrdering/acquiringAndReleasing":{"url":"\/documentation\/atomics\/atomicupdateordering\/acquiringandreleasing","type":"topic","fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"acquiringAndReleasing"},{"text":": `Self`","kind":"text"}],"kind":"symbol","abstract":[{"type":"text","text":"An acquiring-and-releasing operation is a combination of"},{"type":"text","text":" "},{"code":".acquiring","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":".releasing"},{"type":"text","text":" operation on the same variable."}],"role":"symbol","title":"acquiringAndReleasing","identifier":"doc:\/\/swift-atomics.Atomics\/documentation\/Atomics\/AtomicUpdateOrdering\/acquiringAndReleasing"},"doc://swift-atomics.Atomics/documentation/Atomics":{"identifier":"doc:\/\/swift-atomics.Atomics\/documentation\/Atomics","url":"\/documentation\/atomics","abstract":[{"type":"text","text":"An atomics library for Swift."}],"title":"Atomics","kind":"symbol","role":"collection","type":"topic"},"doc://swift-atomics.Atomics/documentation/Atomics/AtomicUpdateOrdering":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"AtomicUpdateOrdering"}],"identifier":"doc:\/\/swift-atomics.Atomics\/documentation\/Atomics\/AtomicUpdateOrdering","url":"\/documentation\/atomics\/atomicupdateordering","kind":"symbol","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"AtomicUpdateOrdering"}],"type":"topic","abstract":[{"text":"Specifies the memory ordering semantics of an atomic read-modify-write","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"operation."}],"title":"AtomicUpdateOrdering"},"doc://swift-atomics.Atomics/documentation/Atomics/AtomicUpdateOrdering/releasing":{"url":"\/documentation\/atomics\/atomicupdateordering\/releasing","type":"topic","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"releasing"},{"text":": `Self`","kind":"text"}],"kind":"symbol","abstract":[{"type":"text","text":"A releasing update synchronizes with acquiring operations that"},{"type":"text","text":" "},{"type":"text","text":"read the value it stores. It ensures that the releasing and"},{"text":" ","type":"text"},{"type":"text","text":"acquiring threads agree that all preceding variable accesses on"},{"type":"text","text":" "},{"text":"the releasing thread happen before the atomic operation itself.","type":"text"}],"role":"symbol","title":"releasing","identifier":"doc:\/\/swift-atomics.Atomics\/documentation\/Atomics\/AtomicUpdateOrdering\/releasing"}}}