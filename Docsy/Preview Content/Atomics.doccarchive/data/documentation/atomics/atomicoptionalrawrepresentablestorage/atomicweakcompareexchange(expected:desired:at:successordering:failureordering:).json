{"primaryContentSections":[{"declarations":[{"tokens":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"atomicWeakCompareExchange","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"expected"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Sq","text":"Optional","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"preciseIdentifier":"s:7Atomics37AtomicOptionalRawRepresentableStorageV7Wrappedxmfp","text":"Wrapped","kind":"typeIdentifier"},{"kind":"text","text":">, "},{"kind":"externalParam","text":"desired"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Sq","text":"Optional","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"preciseIdentifier":"s:7Atomics37AtomicOptionalRawRepresentableStorageV7Wrappedxmfp","text":"Wrapped","kind":"typeIdentifier"},{"kind":"text","text":">, "},{"text":"at","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"pointer","kind":"internalParam"},{"kind":"text","text":": "},{"text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp","kind":"typeIdentifier"},{"kind":"text","text":"<`Self`"},{"text":">, ","kind":"text"},{"text":"successOrdering","kind":"externalParam"},{"kind":"text","text":": "},{"identifier":"doc:\/\/swift-atomics.Atomics\/documentation\/Atomics\/AtomicUpdateOrdering","text":"AtomicUpdateOrdering","preciseIdentifier":"s:7Atomics20AtomicUpdateOrderingV","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"failureOrdering"},{"text":": ","kind":"text"},{"text":"AtomicLoadOrdering","kind":"typeIdentifier","preciseIdentifier":"s:7Atomics18AtomicLoadOrderingV","identifier":"doc:\/\/swift-atomics.Atomics\/documentation\/Atomics\/AtomicLoadOrdering"},{"kind":"text","text":") -> (exchanged"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"},{"text":", original","kind":"text"},{"text":": ","kind":"text"},{"text":"Optional","kind":"typeIdentifier","preciseIdentifier":"s:Sq"},{"text":"<","kind":"text"},{"preciseIdentifier":"s:7Atomics37AtomicOptionalRawRepresentableStorageV7Wrappedxmfp","kind":"typeIdentifier","text":"Wrapped"},{"text":">)","kind":"text"}],"platforms":["macOS"],"languages":["swift"]}],"kind":"declarations"},{"kind":"parameters","parameters":[{"content":[{"type":"paragraph","inlineContent":[{"text":"The expected current value.","type":"text"}]}],"name":"expected"},{"name":"desired","content":[{"type":"paragraph","inlineContent":[{"text":"The desired new value.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"A memory location previously initialized with a value","type":"text"},{"type":"text","text":" "},{"text":"returned by ","type":"text"},{"type":"codeVoice","code":"prepareAtomicRepresentation(for:)"},{"type":"text","text":"."}],"type":"paragraph"}],"name":"pointer"},{"name":"successOrdering","content":[{"inlineContent":[{"text":"The memory ordering to apply if this","type":"text"},{"text":" ","type":"text"},{"text":"operation performs the exchange.","type":"text"}],"type":"paragraph"}]},{"name":"failureOrdering","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The memory ordering to apply on this"},{"text":" ","type":"text"},{"text":"operation does not perform the exchange.","type":"text"}]}]}]},{"content":[{"type":"heading","text":"Return Value","anchor":"return-value","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"A tuple "},{"code":"(exchanged, original)","type":"codeVoice"},{"text":", where ","type":"text"},{"type":"codeVoice","code":"exchanged"},{"text":" is true if","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the exchange was successful, and "},{"code":"original","type":"codeVoice"},{"type":"text","text":" is the original value."}]}],"kind":"content"},{"kind":"content","content":[{"anchor":"discussion","level":2,"text":"Discussion","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This operation performs the following algorithm as a single atomic"},{"type":"text","text":" "},{"text":"transaction:","type":"text"}]},{"code":["atomic(self) { currentValue in","  let original = currentValue","  guard original == expected else { return (false, original) }","  currentValue = desired","  return (true, original)","}"],"type":"codeListing","syntax":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"(In this weak form, transient conditions may cause the "},{"type":"codeVoice","code":"original == expected"},{"text":" check to sometimes return false when the two values are in fact","type":"text"},{"type":"text","text":" "},{"text":"the same.)","type":"text"}]},{"inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"successOrdering"},{"type":"text","text":" argument specifies the memory ordering to use when the"},{"text":" ","type":"text"},{"type":"text","text":"operation manages to update the current value, while "},{"type":"codeVoice","code":"failureOrdering"},{"type":"text","text":" "},{"type":"text","text":"will be used when the operation leaves the value intact."}],"type":"paragraph"}]}],"kind":"symbol","variants":[{"paths":["\/documentation\/atomics\/atomicoptionalrawrepresentablestorage\/atomicweakcompareexchange(expected:desired:at:successordering:failureordering:)"],"traits":[{"interfaceLanguage":"swift"}]}],"hierarchy":{"paths":[["doc:\/\/swift-atomics.Atomics\/documentation\/Atomics","doc:\/\/swift-atomics.Atomics\/documentation\/Atomics\/AtomicOptionalRawRepresentableStorage"]]},"abstract":[{"text":"Perform an atomic weak compare and exchange operation on the value","type":"text"},{"type":"text","text":" "},{"text":"referenced by ","type":"text"},{"code":"pointer","type":"codeVoice"},{"type":"text","text":", applying the specified success\/failure memory"},{"text":" ","type":"text"},{"text":"orderings. This compare-exchange variant is allowed to spuriously fail; it","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"is designed to be called in a loop until it indicates a successful"},{"text":" ","type":"text"},{"type":"text","text":"exchange has happened."}],"sections":[],"metadata":{"symbolKind":"method","roleHeading":"Type Method","modules":[{"name":"Atomics"}],"externalID":"s:7Atomics37AtomicOptionalRawRepresentableStorageV25atomicWeakCompareExchange8expected7desired2at15successOrdering07failureO0Sb9exchanged_xSg8originaltAK_AKnSpyACyxGGAA0b6UpdateO0VAA0b4LoadO0VtFZ","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"atomicWeakCompareExchange"},{"kind":"text","text":"("},{"kind":"externalParam","text":"expected"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Sq","kind":"typeIdentifier","text":"Optional"},{"kind":"text","text":"<"},{"preciseIdentifier":"s:7Atomics37AtomicOptionalRawRepresentableStorageV7Wrappedxmfp","text":"Wrapped","kind":"typeIdentifier"},{"kind":"text","text":">, "},{"kind":"externalParam","text":"desired"},{"kind":"text","text":": "},{"text":"Optional","kind":"typeIdentifier","preciseIdentifier":"s:Sq"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:7Atomics37AtomicOptionalRawRepresentableStorageV7Wrappedxmfp","text":"Wrapped"},{"kind":"text","text":">, "},{"text":"at","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<`Self`"},{"kind":"text","text":">, "},{"kind":"externalParam","text":"successOrdering"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:7Atomics20AtomicUpdateOrderingV","text":"AtomicUpdateOrdering"},{"text":", ","kind":"text"},{"text":"failureOrdering","kind":"externalParam"},{"kind":"text","text":": "},{"text":"AtomicLoadOrdering","kind":"typeIdentifier","preciseIdentifier":"s:7Atomics18AtomicLoadOrderingV"},{"kind":"text","text":") -> (exchanged"},{"text":": ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"text":", original","kind":"text"},{"kind":"text","text":": "},{"text":"Optional","kind":"typeIdentifier","preciseIdentifier":"s:Sq"},{"kind":"text","text":"<"},{"text":"Wrapped","preciseIdentifier":"s:7Atomics37AtomicOptionalRawRepresentableStorageV7Wrappedxmfp","kind":"typeIdentifier"},{"kind":"text","text":">)"}],"title":"atomicWeakCompareExchange(expected:desired:at:successOrdering:failureOrdering:)","role":"symbol"},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/swift-atomics.Atomics\/documentation\/Atomics\/AtomicOptionalRawRepresentableStorage\/atomicWeakCompareExchange(expected:desired:at:successOrdering:failureOrdering:)"},"schemaVersion":{"patch":0,"major":0,"minor":3},"references":{"doc://swift-atomics.Atomics/documentation/Atomics/AtomicOptionalRawRepresentableStorage":{"navigatorTitle":[{"text":"AtomicOptionalRawRepresentableStorage","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AtomicOptionalRawRepresentableStorage","kind":"identifier"}],"title":"AtomicOptionalRawRepresentableStorage","role":"symbol","url":"\/documentation\/atomics\/atomicoptionalrawrepresentablestorage","identifier":"doc:\/\/swift-atomics.Atomics\/documentation\/Atomics\/AtomicOptionalRawRepresentableStorage","abstract":[{"type":"text","text":"A default atomic storage representation for a "},{"type":"codeVoice","code":"RawRepresentable"},{"text":" type","type":"text"},{"type":"text","text":" "},{"type":"text","text":"whose "},{"type":"codeVoice","code":"RawValue"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"AtomicOptionalWrappable"},{"type":"text","text":"."}],"kind":"symbol","type":"topic"},"doc://swift-atomics.Atomics/documentation/Atomics/AtomicOptionalRawRepresentableStorage/atomicWeakCompareExchange(expected:desired:at:successOrdering:failureOrdering:)":{"abstract":[{"type":"text","text":"Perform an atomic weak compare and exchange operation on the value"},{"type":"text","text":" "},{"text":"referenced by ","type":"text"},{"code":"pointer","type":"codeVoice"},{"text":", applying the specified success\/failure memory","type":"text"},{"type":"text","text":" "},{"type":"text","text":"orderings. This compare-exchange variant is allowed to spuriously fail; it"},{"text":" ","type":"text"},{"text":"is designed to be called in a loop until it indicates a successful","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"exchange has happened."}],"type":"topic","kind":"symbol","identifier":"doc:\/\/swift-atomics.Atomics\/documentation\/Atomics\/AtomicOptionalRawRepresentableStorage\/atomicWeakCompareExchange(expected:desired:at:successOrdering:failureOrdering:)","url":"\/documentation\/atomics\/atomicoptionalrawrepresentablestorage\/atomicweakcompareexchange(expected:desired:at:successordering:failureordering:)","title":"atomicWeakCompareExchange(expected:desired:at:successOrdering:failureOrdering:)","fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"atomicWeakCompareExchange","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"expected"},{"kind":"text","text":": "},{"text":"Optional","preciseIdentifier":"s:Sq","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","preciseIdentifier":"s:7Atomics37AtomicOptionalRawRepresentableStorageV7Wrappedxmfp","text":"Wrapped"},{"text":">, ","kind":"text"},{"text":"desired","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Optional","preciseIdentifier":"s:Sq","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"Wrapped","kind":"typeIdentifier","preciseIdentifier":"s:7Atomics37AtomicOptionalRawRepresentableStorageV7Wrappedxmfp"},{"kind":"text","text":">, "},{"text":"at","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Sp","text":"UnsafeMutablePointer","kind":"typeIdentifier"},{"text":"<`Self`","kind":"text"},{"kind":"text","text":">, "},{"text":"successOrdering","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"AtomicUpdateOrdering","preciseIdentifier":"s:7Atomics20AtomicUpdateOrderingV","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"failureOrdering","kind":"externalParam"},{"kind":"text","text":": "},{"text":"AtomicLoadOrdering","preciseIdentifier":"s:7Atomics18AtomicLoadOrderingV","kind":"typeIdentifier"},{"kind":"text","text":") -> (exchanged"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"text":", original","kind":"text"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Optional","preciseIdentifier":"s:Sq"},{"text":"<","kind":"text"},{"text":"Wrapped","preciseIdentifier":"s:7Atomics37AtomicOptionalRawRepresentableStorageV7Wrappedxmfp","kind":"typeIdentifier"},{"text":">)","kind":"text"}],"role":"symbol"},"doc://swift-atomics.Atomics/documentation/Atomics/AtomicLoadOrdering":{"identifier":"doc:\/\/swift-atomics.Atomics\/documentation\/Atomics\/AtomicLoadOrdering","url":"\/documentation\/atomics\/atomicloadordering","abstract":[{"text":"Specifies the memory ordering semantics of an atomic load operation.","type":"text"}],"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"AtomicLoadOrdering","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"AtomicLoadOrdering"}],"title":"AtomicLoadOrdering","kind":"symbol","role":"symbol","type":"topic"},"doc://swift-atomics.Atomics/documentation/Atomics":{"identifier":"doc:\/\/swift-atomics.Atomics\/documentation\/Atomics","url":"\/documentation\/atomics","abstract":[{"type":"text","text":"An atomics library for Swift."}],"title":"Atomics","kind":"symbol","role":"collection","type":"topic"},"doc://swift-atomics.Atomics/documentation/Atomics/AtomicUpdateOrdering":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"AtomicUpdateOrdering"}],"identifier":"doc:\/\/swift-atomics.Atomics\/documentation\/Atomics\/AtomicUpdateOrdering","url":"\/documentation\/atomics\/atomicupdateordering","kind":"symbol","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"AtomicUpdateOrdering"}],"type":"topic","abstract":[{"text":"Specifies the memory ordering semantics of an atomic read-modify-write","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"operation."}],"title":"AtomicUpdateOrdering"}}}