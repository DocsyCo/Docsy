{"sections":[],"kind":"symbol","identifier":{"url":"doc:\/\/sql-kit.SQLKit\/documentation\/SQLKit\/SQLRow\/decode(column:inferringAs:)","interfaceLanguage":"swift"},"metadata":{"fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"decode","kind":"identifier"},{"text":"<","kind":"text"},{"text":"D","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"column","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":", "},{"kind":"externalParam","text":"inferringAs"},{"kind":"text","text":": "},{"text":"D","kind":"typeIdentifier","preciseIdentifier":"s:6SQLKit6SQLRowPAAE6decode6column11inferringAsqd__SS_qd__mtKSeRd__lF1DL_qd__mfp"},{"kind":"text","text":".Type) "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:6SQLKit6SQLRowPAAE6decode6column11inferringAsqd__SS_qd__mtKSeRd__lF1DL_qd__mfp","text":"D"}],"externalID":"s:6SQLKit6SQLRowPAAE6decode6column11inferringAsqd__SS_qd__mtKSeRd__lF","role":"symbol","modules":[{"name":"SQLKit"}],"roleHeading":"Instance Method","symbolKind":"method","title":"decode(column:inferringAs:)","extendedModule":"SQLKit"},"hierarchy":{"paths":[["doc:\/\/sql-kit.SQLKit\/documentation\/SQLKit","doc:\/\/sql-kit.SQLKit\/documentation\/SQLKit\/SQLRow"]]},"abstract":[{"text":"This method exists to enable the compiler to perform type inference on the generic parameter ","type":"text"},{"type":"codeVoice","code":"D"},{"type":"text","text":" of"},{"type":"text","text":" "},{"identifier":"doc:\/\/sql-kit.SQLKit\/documentation\/SQLKit\/SQLRow\/decode(column:as:)","isActive":true,"type":"reference"},{"text":". Protocols can not provide default arguments to methods, which is required for","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"inference to work with generic type parameters. It is not expected that user code will invoke this method"},{"text":" ","type":"text"},{"text":"directly; rather it will be selected by the compiler automatically, as in this example:","type":"text"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/sqlkit\/sqlrow\/decode(column:inferringas:)"]}],"schemaVersion":{"minor":3,"patch":0,"major":0},"primaryContentSections":[{"declarations":[{"tokens":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"decode","kind":"identifier"},{"kind":"text","text":"<"},{"text":"D","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"column","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:SS","text":"String","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"inferringAs","kind":"externalParam"},{"kind":"text","text":": "},{"text":"D","preciseIdentifier":"s:6SQLKit6SQLRowPAAE6decode6column11inferringAsqd__SS_qd__mtKSeRd__lF1DL_qd__mfp","kind":"typeIdentifier"},{"text":".Type = D.self) ","kind":"text"},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"text":"D","kind":"typeIdentifier","preciseIdentifier":"s:6SQLKit6SQLRowPAAE6decode6column11inferringAsqd__SS_qd__mtKSeRd__lF1DL_qd__mfp"},{"kind":"text","text":" "},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","text":"D"},{"text":" : ","kind":"text"},{"kind":"typeIdentifier","text":"Decodable","preciseIdentifier":"s:Se"}],"platforms":["macOS"],"languages":["swift"]}],"kind":"declarations"},{"kind":"content","content":[{"text":"Discussion","type":"heading","anchor":"discussion","level":2},{"type":"codeListing","syntax":null,"code":["let row = getAnSQLRowFromSomewhere()","let id: Int = try row.decode(column: \"id\") \/\/ `D` is inferred to be `Int`","let name = try row.decode(column: \"name\") \/\/ Error: No context to infer the type from","struct Item { var property: Bool }","let item = Item(property: try row.decode(column: \"property\")) \/\/ `D` inferred as `Bool`","let meti = Item(property: try row.decode(column: \"property\", as: Bool?.self)) \/\/ Error: Can't assign Bool? to Bool"]}]}],"references":{"doc://sql-kit.SQLKit/documentation/SQLKit/SQLRow/decode(column:inferringAs:)":{"identifier":"doc:\/\/sql-kit.SQLKit\/documentation\/SQLKit\/SQLRow\/decode(column:inferringAs:)","abstract":[{"type":"text","text":"This method exists to enable the compiler to perform type inference on the generic parameter "},{"type":"codeVoice","code":"D"},{"type":"text","text":" of"},{"text":" ","type":"text"},{"isActive":true,"identifier":"doc:\/\/sql-kit.SQLKit\/documentation\/SQLKit\/SQLRow\/decode(column:as:)","type":"reference"},{"type":"text","text":". Protocols can not provide default arguments to methods, which is required for"},{"text":" ","type":"text"},{"type":"text","text":"inference to work with generic type parameters. It is not expected that user code will invoke this method"},{"text":" ","type":"text"},{"type":"text","text":"directly; rather it will be selected by the compiler automatically, as in this example:"}],"url":"\/documentation\/sqlkit\/sqlrow\/decode(column:inferringas:)","role":"symbol","kind":"symbol","title":"decode(column:inferringAs:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"decode","kind":"identifier"},{"text":"<","kind":"text"},{"text":"D","kind":"genericParameter"},{"kind":"text","text":">("},{"text":"column","kind":"externalParam"},{"kind":"text","text":": "},{"text":"String","kind":"typeIdentifier","preciseIdentifier":"s:SS"},{"text":", ","kind":"text"},{"text":"inferringAs","kind":"externalParam"},{"kind":"text","text":": "},{"text":"D","preciseIdentifier":"s:6SQLKit6SQLRowPAAE6decode6column11inferringAsqd__SS_qd__mtKSeRd__lF1DL_qd__mfp","kind":"typeIdentifier"},{"text":".Type) ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"preciseIdentifier":"s:6SQLKit6SQLRowPAAE6decode6column11inferringAsqd__SS_qd__mtKSeRd__lF1DL_qd__mfp","text":"D","kind":"typeIdentifier"}],"type":"topic"},"doc://sql-kit.SQLKit/documentation/SQLKit/SQLRow/decode(column:as:)":{"url":"\/documentation\/sqlkit\/sqlrow\/decode(column:as:)","role":"symbol","kind":"symbol","type":"topic","abstract":[{"type":"text","text":"If the given column name exists in the row, attempt to decode it as the given type and return the"},{"text":" ","type":"text"},{"text":"result if successful.","type":"text"}],"identifier":"doc:\/\/sql-kit.SQLKit\/documentation\/SQLKit\/SQLRow\/decode(column:as:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"decode"},{"text":"<","kind":"text"},{"text":"D","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"column"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"text":", ","kind":"text"},{"text":"as","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:6SQLKit6SQLRowP6decode6column2asqd__SS_qd__mtKSeRd__lF1DL_qd__mfp","text":"D","kind":"typeIdentifier"},{"kind":"text","text":".Type) "},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"text":"D","preciseIdentifier":"s:6SQLKit6SQLRowP6decode6column2asqd__SS_qd__mtKSeRd__lF1DL_qd__mfp","kind":"typeIdentifier"}],"title":"decode(column:as:)","required":true},"doc://sql-kit.SQLKit/documentation/SQLKit/SQLRow":{"role":"symbol","url":"\/documentation\/sqlkit\/sqlrow","abstract":[{"text":"Represents a single row in a result set returned from an executed SQL query.","type":"text"}],"type":"topic","identifier":"doc:\/\/sql-kit.SQLKit\/documentation\/SQLKit\/SQLRow","navigatorTitle":[{"text":"SQLRow","kind":"identifier"}],"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"SQLRow","kind":"identifier"}],"title":"SQLRow","kind":"symbol"},"doc://sql-kit.SQLKit/documentation/SQLKit":{"kind":"symbol","role":"collection","type":"topic","abstract":[{"text":"SQLKit is a library for building and serializing SQL queries in Swift.","type":"text"}],"url":"\/documentation\/sqlkit","title":"SQLKit","identifier":"doc:\/\/sql-kit.SQLKit\/documentation\/SQLKit"}}}