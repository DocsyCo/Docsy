{"metadata":{"role":"article","roleHeading":"Article","modules":[{"name":"SQLKit"}],"title":"Basic Usage"},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/sql-kit.SQLKit\/documentation\/SQLKit\/BasicUsage"},"hierarchy":{"paths":[["doc:\/\/sql-kit.SQLKit\/documentation\/SQLKit"]]},"sections":[],"schemaVersion":{"major":0,"minor":3,"patch":0},"abstract":[{"text":"Getting started with SQLKit","type":"text"}],"kind":"article","primaryContentSections":[{"kind":"content","content":[{"text":"Overview","anchor":"Overview","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Query builders"}],"type":"emphasis"},{"type":"text","text":" make up the primary API surface for SQLKit. A query builder is an object associated with a database used to build and execute a query, as shown in the following example:"}]},{"syntax":"swift","code":["\/\/\/ A simple data model ","struct Planet: Codable {","    let id: Int","    let name: String","}","","\/\/\/ Database connection objects are vended by SQLKit drivers; the details","\/\/\/ differ from driver to driver.","let database: any SQLDatabase = ...","","\/\/\/ This value can come from user input, such a query parameter.","let planetName: String = ...","","let planets = try await database","    .select()","    .columns(\"id\", \"name\")","    .from(\"planets\")","    .where(\"name\", .equal, planetName)","    .all(decoding: Planet.self)"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"The actual query executed by this example depends on the driver used to get the database object. The ","type":"text"},{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/vapor\/postgres-kit"},{"type":"text","text":" generates this query:"}]},{"type":"codeListing","syntax":"PLpgsql","code":["SELECT \"id\", \"name\" FROM \"planets\" WHERE \"name\" = $1"]},{"inlineContent":[{"text":"… and the ","type":"text"},{"type":"reference","identifier":"https:\/\/github.com\/vapor\/sqlite-kit","isActive":true},{"type":"text","text":"’s output is very similar:"}],"type":"paragraph"},{"code":["SELECT \"id\", \"name\" FROM \"planets\" WHERE \"name\" = ?1"],"type":"codeListing","syntax":"sql"},{"inlineContent":[{"type":"text","text":"… whereas the "},{"type":"reference","identifier":"https:\/\/github.com\/vapor\/mysql-kit","isActive":true},{"type":"text","text":"’s output is less so:"}],"type":"paragraph"},{"syntax":"mysql","type":"codeListing","code":["SELECT `id`, `name` FROM `planets` WHERE `name` = ?"]},{"type":"heading","anchor":"Databases-Expressions-and-Builders","text":"Databases, Expressions, and Builders","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"Instances of "},{"identifier":"doc:\/\/sql-kit.SQLKit\/documentation\/SQLKit\/SQLDatabase","isActive":true,"type":"reference"},{"text":" are capable of executing arbitrary ","type":"text"},{"identifier":"doc:\/\/sql-kit.SQLKit\/documentation\/SQLKit\/SQLExpression","type":"reference","isActive":true},{"type":"text","text":"s:"}]},{"code":["let db: any SQLDatabase = \/\/ obtain a database from an SQLKit driver","let query = db","    .select()","    .column(SQLLiteral.string(\"a\"))","    .query ","","try await db.execute(","    sql: query,","    onRow: { (row: any SQLRow) in","        \/\/ ...","    }",")"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"identifier":"doc:\/\/sql-kit.SQLKit\/documentation\/SQLKit\/SQLExpression","isActive":true,"type":"reference"},{"text":" protocol provides a common interface for transforming an arbitrary set of syntactical building blocks into a string of SQL code. A comprehensive set of SQL building blocks for SQL syntax is provided, along with numerous expressions representing composed clauses, and even complete SQL queries. Expressions are serialized to a combination of a raw string of SQL text and an array of zero or more bound parameter values.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here is an example of constructing a "},{"code":"SELECT","type":"codeVoice"},{"text":" query using the ","type":"text"},{"type":"reference","identifier":"doc:\/\/sql-kit.SQLKit\/documentation\/SQLKit\/SQLSelect","isActive":true},{"type":"text","text":" expression type, along with several syntactical building blocks, directly:"}]},{"type":"codeListing","syntax":"swift","code":["var select = SQLSelect()","","select.columns = [","    SQLColumn(\"column1\"),","    SQLColumn(\"column2\", table: \"table2\"),","]","select.tables = [","    SQLIdentifier(\"table1\")","]","select.joins = [","    SQLJoin(","        method: SQLJoinMethod.inner,","        table: SQLIdentifier(\"table2\"),","        expression: SQLBinaryExpression(","            SQLColumn(\"column1\", table: \"table1\"),","            .equal,","            SQLColumn(\"column2\", table: \"table2\")","        )","    )","]","select.predicate = SQLBinaryExpression(","    SQLBinaryExpression(SQLColumn(\"column1\"), .equal, SQLBind(\"value\")),","    .and,","    SQLBinaryExpression(SQLColumn(\"column2\"), .is, SQLLiteral.null)",")"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"When serialized against a database using the PostgreSQL dialect, the resulting query looks like this (whitespace has been added for readability):"}]},{"code":["SELECT \"column1\", \"table2\".\"column2\"","FROM \"table1\"","INNER JOIN \"table2\" ON \"table1\".\"column1\" = \"table2\".\"column2\"","WHERE \"column1\" = $1 AND \"column2\" IS NULL"],"syntax":"PLpgsql","type":"codeListing"},{"inlineContent":[{"text":"Of course, this is an ","type":"text"},{"inlineContent":[{"type":"text","text":"awful"}],"type":"emphasis"},{"text":" lot of code to achieve such a relatively straightforward result, which is why SQLKit provides query builders.","type":"text"}],"type":"paragraph"},{"text":"Rows","type":"heading","level":3,"anchor":"Rows"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For query builders that support returning results (e.g. any builder conforming to the "},{"identifier":"doc:\/\/sql-kit.SQLKit\/documentation\/SQLKit\/SQLQueryFetcher","type":"reference","isActive":true},{"text":" protocol), there are additional methods for handling the database output:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"all()"},{"type":"text","text":": Returns an array of rows."}]}]},{"content":[{"inlineContent":[{"code":"first()","type":"codeVoice"},{"type":"text","text":": Returns an optional row."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"code":"run(_:)","type":"codeVoice"},{"text":": Accepts a closure that handles rows as they are returned.","type":"text"}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Each of these methods provides one or more "},{"type":"reference","identifier":"doc:\/\/sql-kit.SQLKit\/documentation\/SQLKit\/SQLRow","isActive":true},{"type":"text","text":"s. "},{"type":"reference","identifier":"doc:\/\/sql-kit.SQLKit\/documentation\/SQLKit\/SQLRow","isActive":true},{"type":"text","text":" is a protocol providing methods for accessing column values:"}]},{"type":"codeListing","code":["let row: any SQLRow","let name = try row.decode(column: \"name\", as: String.self)","print(name) \/\/ String"],"syntax":"swift"},{"text":"Codable","level":3,"anchor":"Codable","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"doc:\/\/sql-kit.SQLKit\/documentation\/SQLKit\/SQLRow"},{"text":" also supports decoding ","type":"text"},{"type":"codeVoice","code":"Codable"},{"text":" models directly:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["struct Planet: Codable {","    var name: String","}","","let planet = try row.decode(model: Planet.self)"]},{"type":"paragraph","inlineContent":[{"text":"Query builders that support returning results have convenience methods for automatically decoding models.","type":"text"}]},{"type":"codeListing","code":["let planets: [Planet] = try await db.select()","    ...","    .all(decoding: Planet.self)"],"syntax":"swift"},{"anchor":"Select","type":"heading","text":"Select","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"reference","identifier":"doc:\/\/sql-kit.SQLKit\/documentation\/SQLKit\/SQLDatabase\/select()","isActive":true},{"text":" method creates a ","type":"text"},{"code":"SELECT","type":"codeVoice"},{"type":"text","text":" query builder:"}]},{"type":"codeListing","syntax":"swift","code":["let planets: [any SQLRow] = try await db.select()","    .columns(\"id\", \"name\")","    .from(\"planets\")","    .where(\"name\", .equal, \"Earth\")","    .all()"]},{"inlineContent":[{"type":"text","text":"This code generates the following SQL when used with the PostgresKit driver:"}],"type":"paragraph"},{"syntax":"PLpgsql","type":"codeListing","code":["SELECT \"id\", \"name\" FROM \"planets\" WHERE \"name\" = $1 -- bindings: [\"Earth\"]"]},{"inlineContent":[{"text":"Notice that ","type":"text"},{"code":"Encodable","type":"codeVoice"},{"text":" values are automatically bound as parameters instead of being serialized directly to the query.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"The select builder includes the following methods (most of which have numerous variations):","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"type":"codeVoice","code":"columns()"},{"text":" (specify a list of columns and\/or expressions to return)","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"from()"},{"type":"text","text":" (specify a table to select from)"}]}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"join()"},{"type":"text","text":" (specify additional tables and how to relate them to others)"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"code":"where()","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"orWhere()","type":"codeVoice"},{"text":" (specify conditions that narrow down the possible results)","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"limit()"},{"type":"text","text":" and "},{"code":"offset()","type":"codeVoice"},{"text":" (specify a limited and\/or offsetted range of results to return)","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"orderBy()"},{"text":" (specify how to sort results before returning them)","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"code":"groupBy()","type":"codeVoice"},{"text":" (specify columns and\/or expressions for aggregating results)","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"having()"},{"text":" and ","type":"text"},{"code":"orHaving()","type":"codeVoice"},{"text":" (specify secondary conditions to apply to the results after aggregation)","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"distinct()","type":"codeVoice"},{"text":" (specify coalescing of duplicate results)","type":"text"}]}]},{"content":[{"inlineContent":[{"code":"for()","type":"codeVoice"},{"type":"text","text":" and "},{"code":"lockingClause()","type":"codeVoice"},{"text":" (specify locking behavior for rows that appear in results)","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Conditional expressions provided to "},{"type":"codeVoice","code":"where()"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"having()"},{"text":" are joined with ","type":"text"},{"type":"codeVoice","code":"AND"},{"type":"text","text":". Corresponding "},{"code":"orWhere()","type":"codeVoice"},{"type":"text","text":" and "},{"code":"orHaving()","type":"codeVoice"},{"text":" methods join conditions with ","type":"text"},{"type":"codeVoice","code":"OR"},{"type":"text","text":" instead."}]},{"syntax":"swift","code":["builder.where(\"name\", .equal, \"Earth\").orWhere(\"name\", .equal, \"Mars\")"],"type":"codeListing"},{"inlineContent":[{"text":"This code generates the following SQL when used with the MySQL driver:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"mysql","code":["WHERE `name` = ? OR `name` = ? -- bindings: [\"Earth\", \"Mars\"]"]},{"type":"paragraph","inlineContent":[{"code":"where()","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"orWhere()"},{"text":", ","type":"text"},{"code":"having()","type":"codeVoice"},{"text":", and ","type":"text"},{"type":"codeVoice","code":"orHaving()"},{"type":"text","text":" also support creating grouped clauses:"}]},{"code":["builder.where(\"name\", .notEqual, SQLLiteral.null).where {","    $0.where(\"name\", .equal, SQLBind(\"Milky Way\"))","      .orWhere(\"name\", .equal, SQLBind(\"Andromeda\"))","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This code generates the following SQL when used with the SQLite driver:"}]},{"syntax":"sql","code":["WHERE \"name\" <> NULL AND (\"name\" = ?1 OR \"name\" = ?2) -- bindings: [\"Milky Way\", \"Andromeda\"]"],"type":"codeListing"},{"type":"heading","level":2,"text":"Insert","anchor":"Insert"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"reference","identifier":"doc:\/\/sql-kit.SQLKit\/documentation\/SQLKit\/SQLDatabase\/insert(into:)-67oqt","isActive":true},{"type":"text","text":" and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/sql-kit.SQLKit\/documentation\/SQLKit\/SQLDatabase\/insert(into:)-5n3gh"},{"text":" methods create an ","type":"text"},{"code":"INSERT","type":"codeVoice"},{"text":" query builder:","type":"text"}]},{"code":["try await db.insert(into: \"galaxies\")","    .columns(\"id\", \"name\")","    .values(SQLLiteral.default, SQLBind(\"Milky Way\"))","    .values(SQLLiteral.default, SQLBind(\"Andromeda\"))","    .run()"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This code generates the following SQL when used with the PostgreSQL driver:"}]},{"type":"codeListing","code":["INSERT INTO \"galaxies\" (\"id\", \"name\") VALUES (DEFAULT, $1), (DEFAULT, $2) -- bindings: [\"Milky Way\", \"Andromeda\"]"],"syntax":"PLpgsql"},{"inlineContent":[{"type":"text","text":"The insert builder also has methods for encoding "},{"code":"Codable","type":"codeVoice"},{"text":" types as sets of values:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["struct Galaxy: Codable {","    var name: String","}","","try builder.model(Galaxy(name: \"Milky Way\"))"]},{"type":"paragraph","inlineContent":[{"text":"This code generates the same SQL as would ","type":"text"},{"code":"builder.columns(\"name\").values(\"Milky Way\")","type":"codeVoice"},{"type":"text","text":"."}]},{"level":2,"text":"Update","type":"heading","anchor":"Update"},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"identifier":"doc:\/\/sql-kit.SQLKit\/documentation\/SQLKit\/SQLDatabase\/update(_:)-2tf1c","isActive":true,"type":"reference"},{"type":"text","text":" and "},{"type":"reference","identifier":"doc:\/\/sql-kit.SQLKit\/documentation\/SQLKit\/SQLDatabase\/update(_:)-80964","isActive":true},{"type":"text","text":" methods create an "},{"type":"codeVoice","code":"UPDATE"},{"type":"text","text":" query builder:"}]},{"syntax":"swift","type":"codeListing","code":["try await db.update(\"planets\")","    .set(\"name\", to: \"Jupiter\")","    .where(\"name\", .equal, \"Jupiter\")","    .run()"]},{"type":"paragraph","inlineContent":[{"text":"This code generates the following SQL when used with the MySQL driver:","type":"text"}]},{"code":["UPDATE `planets` SET `name` = ? WHERE `name` = ? -- bindings: [\"Jupiter\", \"Jupiter\"]"],"type":"codeListing","syntax":"mysql"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The update builder supports the same "},{"type":"codeVoice","code":"where()"},{"type":"text","text":" and "},{"code":"orWhere()","type":"codeVoice"},{"type":"text","text":" methods as the select builder, via the "},{"identifier":"doc:\/\/sql-kit.SQLKit\/documentation\/SQLKit\/SQLPredicateBuilder","isActive":true,"type":"reference"},{"type":"text","text":" protocol."}]},{"type":"heading","text":"Delete","level":2,"anchor":"Delete"},{"inlineContent":[{"type":"text","text":"The "},{"identifier":"doc:\/\/sql-kit.SQLKit\/documentation\/SQLKit\/SQLDatabase\/delete(from:)-3tx4f","isActive":true,"type":"reference"},{"type":"text","text":" and "},{"identifier":"doc:\/\/sql-kit.SQLKit\/documentation\/SQLKit\/SQLDatabase\/delete(from:)-4bqlu","type":"reference","isActive":true},{"type":"text","text":" methods create a "},{"type":"codeVoice","code":"DELETE"},{"text":" query builder:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["try await db.delete(from: \"planets\")","    .where(\"name\", .equal, \"Jupiter\")","    .run()"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This code generates the following SQL when used with the SQLite driver:"}]},{"syntax":"sql","code":["DELETE FROM \"planets\" WHERE \"name\" = ?1 -- bindings: [\"Jupiter\"]"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The delete builder also conforms to "},{"type":"reference","identifier":"doc:\/\/sql-kit.SQLKit\/documentation\/SQLKit\/SQLPredicateBuilder","isActive":true},{"type":"text","text":"."}]},{"level":2,"anchor":"Raw","text":"Raw","type":"heading"},{"inlineContent":[{"text":"The ","type":"text"},{"identifier":"doc:\/\/sql-kit.SQLKit\/documentation\/SQLKit\/SQLDatabase\/raw(_:)","type":"reference","isActive":true},{"type":"text","text":" method allows passing custom SQL query strings, with support for parameterized bindings and correctly-quoted identifiers:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let planets = try await db.raw(\"SELECT \\(SQLLiteral.all) FROM \\(ident: table) WHERE \\(ident: name) = \\(bind: \"planet\")\")","    .all()"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This code generates the following SQL when used with the PostgreSQL driver:"}]},{"syntax":"PLpgsql","code":["SELECT * FROM \"planets\" WHERE \"name\" = $1 -- bindings: [\"planet\"]"],"type":"codeListing"},{"inlineContent":[{"text":"The ","type":"text"},{"type":"reference","identifier":"doc:\/\/sql-kit.SQLKit\/documentation\/SQLKit\/SQLQueryString\/appendInterpolation(bind:)","isActive":true},{"text":" interpolation should be used for any user input to avoid SQL injection. The ","type":"text"},{"type":"reference","identifier":"doc:\/\/sql-kit.SQLKit\/documentation\/SQLKit\/SQLQueryString\/appendInterpolation(ident:)","isActive":true},{"type":"text","text":" interpolation is used to safely specify identifiers such as table and column names."}],"type":"paragraph"},{"type":"aside","style":"important","name":"Important","content":[{"inlineContent":[{"type":"text","text":"Always prefer a structured query (i.e. one for which a builder or expression type exists) over raw queries. Consider writing your own "},{"identifier":"doc:\/\/sql-kit.SQLKit\/documentation\/SQLKit\/SQLExpression","type":"reference","isActive":true},{"type":"text","text":"s, and even your own "},{"type":"reference","identifier":"doc:\/\/sql-kit.SQLKit\/documentation\/SQLKit\/SQLQueryBuilder","isActive":true},{"text":"s, rather than using raw queries, and don’t hesitate to ","type":"text"},{"isActive":true,"type":"reference","identifier":"https:\/\/github.com\/vapor\/sql-kit\/issues\/new"},{"text":" to ask for additional feature support.","type":"text"}],"type":"paragraph"}]}]}],"variants":[{"paths":["\/documentation\/sqlkit\/basicusage"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://sql-kit.SQLKit/documentation/SQLKit/SQLSelectBuilder":{"title":"SQLSelectBuilder","identifier":"doc:\/\/sql-kit.SQLKit\/documentation\/SQLKit\/SQLSelectBuilder","role":"symbol","abstract":[{"type":"text","text":"Builds "},{"isActive":true,"identifier":"doc:\/\/sql-kit.SQLKit\/documentation\/SQLKit\/SQLSelect","type":"reference"},{"type":"text","text":" queries."}],"kind":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"SQLSelectBuilder"}],"navigatorTitle":[{"kind":"identifier","text":"SQLSelectBuilder"}],"type":"topic","url":"\/documentation\/sqlkit\/sqlselectbuilder"},"doc://sql-kit.SQLKit/documentation/SQLKit/SQLDatabase/delete(from:)-3tx4f":{"url":"\/documentation\/sqlkit\/sqldatabase\/delete(from:)-3tx4f","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"delete"},{"text":"(","kind":"text"},{"text":"from","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:6SQLKit16SQLDeleteBuilderC","text":"SQLDeleteBuilder","kind":"typeIdentifier"}],"abstract":[{"type":"text","text":"Create a new "},{"isActive":true,"identifier":"doc:\/\/sql-kit.SQLKit\/documentation\/SQLKit\/SQLDeleteBuilder","type":"reference"},{"text":".","type":"text"}],"identifier":"doc:\/\/sql-kit.SQLKit\/documentation\/SQLKit\/SQLDatabase\/delete(from:)-3tx4f","kind":"symbol","title":"delete(from:)","type":"topic"},"doc://sql-kit.SQLKit/documentation/SQLKit/SQLRawBuilder":{"title":"SQLRawBuilder","identifier":"doc:\/\/sql-kit.SQLKit\/documentation\/SQLKit\/SQLRawBuilder","role":"symbol","abstract":[{"text":"Builds raw SQL queries.","type":"text"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"text":"SQLRawBuilder","kind":"identifier"}],"navigatorTitle":[{"text":"SQLRawBuilder","kind":"identifier"}],"type":"topic","url":"\/documentation\/sqlkit\/sqlrawbuilder"},"doc://sql-kit.SQLKit/documentation/SQLKit/SQLRow":{"role":"symbol","url":"\/documentation\/sqlkit\/sqlrow","abstract":[{"text":"Represents a single row in a result set returned from an executed SQL query.","type":"text"}],"type":"topic","identifier":"doc:\/\/sql-kit.SQLKit\/documentation\/SQLKit\/SQLRow","navigatorTitle":[{"text":"SQLRow","kind":"identifier"}],"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"SQLRow","kind":"identifier"}],"title":"SQLRow","kind":"symbol"},"doc://sql-kit.SQLKit/documentation/SQLKit/SQLQueryString/appendInterpolation(ident:)":{"url":"\/documentation\/sqlkit\/sqlquerystring\/appendinterpolation(ident:)","type":"topic","identifier":"doc:\/\/sql-kit.SQLKit\/documentation\/SQLKit\/SQLQueryString\/appendInterpolation(ident:)","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"appendInterpolation"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"ident"},{"text":": ","kind":"text"},{"text":"String","kind":"typeIdentifier","preciseIdentifier":"s:SS"},{"text":")","kind":"text"}],"abstract":[{"type":"text","text":"Embed a "},{"type":"codeVoice","code":"String"},{"type":"text","text":" as an identifier, as if via "},{"type":"reference","identifier":"doc:\/\/sql-kit.SQLKit\/documentation\/SQLKit\/SQLIdentifier","isActive":true},{"type":"text","text":"."}],"title":"appendInterpolation(ident:)","kind":"symbol"},"https://github.com/vapor/postgres-kit":{"identifier":"https:\/\/github.com\/vapor\/postgres-kit","url":"https:\/\/github.com\/vapor\/postgres-kit","title":"PostgreSQL driver","type":"link","titleInlineContent":[{"type":"text","text":"PostgreSQL driver"}]},"https://github.com/vapor/mysql-kit":{"identifier":"https:\/\/github.com\/vapor\/mysql-kit","url":"https:\/\/github.com\/vapor\/mysql-kit","title":"MySQL driver","type":"link","titleInlineContent":[{"type":"text","text":"MySQL driver"}]},"doc://sql-kit.SQLKit/documentation/SQLKit/SQLDeleteBuilder":{"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"SQLDeleteBuilder"}],"title":"SQLDeleteBuilder","kind":"symbol","url":"\/documentation\/sqlkit\/sqldeletebuilder","role":"symbol","type":"topic","navigatorTitle":[{"text":"SQLDeleteBuilder","kind":"identifier"}],"abstract":[{"type":"text","text":"Builds "},{"isActive":true,"type":"reference","identifier":"doc:\/\/sql-kit.SQLKit\/documentation\/SQLKit\/SQLDelete"},{"type":"text","text":" queries."}],"identifier":"doc:\/\/sql-kit.SQLKit\/documentation\/SQLKit\/SQLDeleteBuilder"},"doc://sql-kit.SQLKit/documentation/SQLKit":{"kind":"symbol","role":"collection","type":"topic","abstract":[{"text":"SQLKit is a library for building and serializing SQL queries in Swift.","type":"text"}],"url":"\/documentation\/sqlkit","title":"SQLKit","identifier":"doc:\/\/sql-kit.SQLKit\/documentation\/SQLKit"},"doc://sql-kit.SQLKit/documentation/SQLKit/SQLPredicateBuilder":{"title":"SQLPredicateBuilder","identifier":"doc:\/\/sql-kit.SQLKit\/documentation\/SQLKit\/SQLPredicateBuilder","role":"symbol","abstract":[{"type":"text","text":"Common definitions for any query builder which permits specifying a primary predicate."}],"kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"SQLPredicateBuilder"}],"navigatorTitle":[{"kind":"identifier","text":"SQLPredicateBuilder"}],"type":"topic","url":"\/documentation\/sqlkit\/sqlpredicatebuilder"},"doc://sql-kit.SQLKit/documentation/SQLKit/SQLInsertBuilder":{"role":"symbol","url":"\/documentation\/sqlkit\/sqlinsertbuilder","abstract":[{"type":"text","text":"Builds "},{"identifier":"doc:\/\/sql-kit.SQLKit\/documentation\/SQLKit\/SQLInsert","type":"reference","isActive":true},{"type":"text","text":" queries."}],"type":"topic","identifier":"doc:\/\/sql-kit.SQLKit\/documentation\/SQLKit\/SQLInsertBuilder","navigatorTitle":[{"kind":"identifier","text":"SQLInsertBuilder"}],"fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"text":"SQLInsertBuilder","kind":"identifier"}],"title":"SQLInsertBuilder","kind":"symbol"},"doc://sql-kit.SQLKit/documentation/SQLKit/SQLDatabase/insert(into:)-5n3gh":{"abstract":[{"text":"Create a new ","type":"text"},{"isActive":true,"identifier":"doc:\/\/sql-kit.SQLKit\/documentation\/SQLKit\/SQLInsertBuilder","type":"reference"},{"text":".","type":"text"}],"fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"insert","kind":"identifier"},{"kind":"text","text":"("},{"text":"into","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"keyword","text":"any"},{"kind":"text","text":" "},{"text":"SQLExpression","preciseIdentifier":"s:6SQLKit13SQLExpressionP","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"text":"SQLInsertBuilder","preciseIdentifier":"s:6SQLKit16SQLInsertBuilderC","kind":"typeIdentifier"}],"title":"insert(into:)","kind":"symbol","role":"symbol","identifier":"doc:\/\/sql-kit.SQLKit\/documentation\/SQLKit\/SQLDatabase\/insert(into:)-5n3gh","type":"topic","url":"\/documentation\/sqlkit\/sqldatabase\/insert(into:)-5n3gh"},"doc://sql-kit.SQLKit/documentation/SQLKit/SQLQueryBuilder":{"title":"SQLQueryBuilder","identifier":"doc:\/\/sql-kit.SQLKit\/documentation\/SQLKit\/SQLQueryBuilder","role":"symbol","abstract":[{"type":"text","text":"Base definitions for builders which set up queries and execute them against a given database."}],"kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"SQLQueryBuilder","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"SQLQueryBuilder"}],"type":"topic","url":"\/documentation\/sqlkit\/sqlquerybuilder"},"doc://sql-kit.SQLKit/documentation/SQLKit/SQLDatabase/raw(_:)":{"abstract":[{"text":"Create a new ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/sql-kit.SQLKit\/documentation\/SQLKit\/SQLRawBuilder"},{"text":".","type":"text"}],"url":"\/documentation\/sqlkit\/sqldatabase\/raw(_:)","title":"raw(_:)","type":"topic","kind":"symbol","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"raw","kind":"identifier"},{"text":"(","kind":"text"},{"text":"SQLQueryString","preciseIdentifier":"s:6SQLKit14SQLQueryStringV","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"text":"SQLRawBuilder","kind":"typeIdentifier","preciseIdentifier":"s:6SQLKit13SQLRawBuilderC"}],"identifier":"doc:\/\/sql-kit.SQLKit\/documentation\/SQLKit\/SQLDatabase\/raw(_:)"},"doc://sql-kit.SQLKit/documentation/SQLKit/SQLDatabase/delete(from:)-4bqlu":{"abstract":[{"type":"text","text":"Create a new "},{"type":"reference","identifier":"doc:\/\/sql-kit.SQLKit\/documentation\/SQLKit\/SQLDeleteBuilder","isActive":true},{"text":".","type":"text"}],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"delete","kind":"identifier"},{"kind":"text","text":"("},{"text":"from","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"keyword","text":"any"},{"text":" ","kind":"text"},{"text":"SQLExpression","kind":"typeIdentifier","preciseIdentifier":"s:6SQLKit13SQLExpressionP"},{"kind":"text","text":") -> "},{"text":"SQLDeleteBuilder","kind":"typeIdentifier","preciseIdentifier":"s:6SQLKit16SQLDeleteBuilderC"}],"title":"delete(from:)","kind":"symbol","role":"symbol","identifier":"doc:\/\/sql-kit.SQLKit\/documentation\/SQLKit\/SQLDatabase\/delete(from:)-4bqlu","type":"topic","url":"\/documentation\/sqlkit\/sqldatabase\/delete(from:)-4bqlu"},"doc://sql-kit.SQLKit/documentation/SQLKit/SQLDatabase/update(_:)-2tf1c":{"url":"\/documentation\/sqlkit\/sqldatabase\/update(_:)-2tf1c","abstract":[{"type":"text","text":"Create a new "},{"identifier":"doc:\/\/sql-kit.SQLKit\/documentation\/SQLKit\/SQLUpdateBuilder","type":"reference","isActive":true},{"text":" associated with this database.","type":"text"}],"kind":"symbol","type":"topic","title":"update(_:)","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"update","kind":"identifier"},{"kind":"text","text":"("},{"kind":"typeIdentifier","preciseIdentifier":"s:SS","text":"String"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:6SQLKit16SQLUpdateBuilderC","text":"SQLUpdateBuilder","kind":"typeIdentifier"}],"identifier":"doc:\/\/sql-kit.SQLKit\/documentation\/SQLKit\/SQLDatabase\/update(_:)-2tf1c"},"doc://sql-kit.SQLKit/documentation/SQLKit/SQLDatabase/insert(into:)-67oqt":{"type":"topic","url":"\/documentation\/sqlkit\/sqldatabase\/insert(into:)-67oqt","title":"insert(into:)","abstract":[{"text":"Create a new ","type":"text"},{"isActive":true,"identifier":"doc:\/\/sql-kit.SQLKit\/documentation\/SQLKit\/SQLInsertBuilder","type":"reference"},{"text":".","type":"text"}],"role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"insert"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"into"},{"kind":"text","text":": "},{"preciseIdentifier":"s:SS","text":"String","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"SQLInsertBuilder","kind":"typeIdentifier","preciseIdentifier":"s:6SQLKit16SQLInsertBuilderC"}],"kind":"symbol","identifier":"doc:\/\/sql-kit.SQLKit\/documentation\/SQLKit\/SQLDatabase\/insert(into:)-67oqt"},"doc://sql-kit.SQLKit/documentation/SQLKit/SQLUpdateBuilder":{"title":"SQLUpdateBuilder","identifier":"doc:\/\/sql-kit.SQLKit\/documentation\/SQLKit\/SQLUpdateBuilder","role":"symbol","abstract":[{"type":"text","text":"Builds "},{"type":"reference","isActive":true,"identifier":"doc:\/\/sql-kit.SQLKit\/documentation\/SQLKit\/SQLUpdate"},{"type":"text","text":" queries."}],"kind":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"text":"SQLUpdateBuilder","kind":"identifier"}],"navigatorTitle":[{"text":"SQLUpdateBuilder","kind":"identifier"}],"type":"topic","url":"\/documentation\/sqlkit\/sqlupdatebuilder"},"doc://sql-kit.SQLKit/documentation/SQLKit/SQLSelect":{"title":"SQLSelect","identifier":"doc:\/\/sql-kit.SQLKit\/documentation\/SQLKit\/SQLSelect","role":"symbol","abstract":[{"type":"text","text":"An expression representing a "},{"type":"codeVoice","code":"SELECT"},{"text":" query. Used to retrieve rows and expression results from a database.","type":"text"}],"kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SQLSelect","kind":"identifier"}],"navigatorTitle":[{"text":"SQLSelect","kind":"identifier"}],"type":"topic","url":"\/documentation\/sqlkit\/sqlselect"},"doc://sql-kit.SQLKit/documentation/SQLKit/SQLDatabase":{"identifier":"doc:\/\/sql-kit.SQLKit\/documentation\/SQLKit\/SQLDatabase","abstract":[{"type":"text","text":"The common interface to SQLKit for both drivers and client code."}],"type":"topic","title":"SQLDatabase","navigatorTitle":[{"text":"SQLDatabase","kind":"identifier"}],"role":"symbol","url":"\/documentation\/sqlkit\/sqldatabase","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"SQLDatabase","kind":"identifier"}],"kind":"symbol"},"doc://sql-kit.SQLKit/documentation/SQLKit/SQLDatabase/select()":{"kind":"symbol","role":"symbol","title":"select()","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"select","kind":"identifier"},{"text":"() -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:6SQLKit16SQLSelectBuilderC","text":"SQLSelectBuilder"}],"type":"topic","url":"\/documentation\/sqlkit\/sqldatabase\/select()","identifier":"doc:\/\/sql-kit.SQLKit\/documentation\/SQLKit\/SQLDatabase\/select()","abstract":[{"text":"Create a new ","type":"text"},{"isActive":true,"identifier":"doc:\/\/sql-kit.SQLKit\/documentation\/SQLKit\/SQLSelectBuilder","type":"reference"},{"text":".","type":"text"}]},"https://github.com/vapor/sql-kit/issues/new":{"identifier":"https:\/\/github.com\/vapor\/sql-kit\/issues\/new","url":"https:\/\/github.com\/vapor\/sql-kit\/issues\/new","title":"open an issue","type":"link","titleInlineContent":[{"type":"text","text":"open an issue"}]},"doc://sql-kit.SQLKit/documentation/SQLKit/SQLExpression":{"abstract":[{"type":"text","text":"The fundamental base type of anything which can be represented as SQL using SQLKit."}],"navigatorTitle":[{"text":"SQLExpression","kind":"identifier"}],"url":"\/documentation\/sqlkit\/sqlexpression","title":"SQLExpression","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"SQLExpression"}],"kind":"symbol","identifier":"doc:\/\/sql-kit.SQLKit\/documentation\/SQLKit\/SQLExpression"},"doc://sql-kit.SQLKit/documentation/SQLKit/SQLQueryFetcher":{"role":"symbol","url":"\/documentation\/sqlkit\/sqlqueryfetcher","abstract":[{"text":"Common definitions for ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/sql-kit.SQLKit\/documentation\/SQLKit\/SQLQueryBuilder"},{"text":"s which support retrieving result rows.","type":"text"}],"type":"topic","identifier":"doc:\/\/sql-kit.SQLKit\/documentation\/SQLKit\/SQLQueryFetcher","navigatorTitle":[{"text":"SQLQueryFetcher","kind":"identifier"}],"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"SQLQueryFetcher","kind":"identifier"}],"title":"SQLQueryFetcher","kind":"symbol"},"doc://sql-kit.SQLKit/documentation/SQLKit/SQLIdentifier":{"role":"symbol","abstract":[{"text":"A fundamental syntactical expression - a quoted identifier (also often referred to as a “name” or “object name”).","type":"text"}],"identifier":"doc:\/\/sql-kit.SQLKit\/documentation\/SQLKit\/SQLIdentifier","title":"SQLIdentifier","url":"\/documentation\/sqlkit\/sqlidentifier","navigatorTitle":[{"kind":"identifier","text":"SQLIdentifier"}],"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"SQLIdentifier","kind":"identifier"}],"type":"topic","kind":"symbol"},"doc://sql-kit.SQLKit/documentation/SQLKit/SQLDatabase/update(_:)-80964":{"role":"symbol","title":"update(_:)","kind":"symbol","type":"topic","url":"\/documentation\/sqlkit\/sqldatabase\/update(_:)-80964","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"update","kind":"identifier"},{"kind":"text","text":"("},{"kind":"keyword","text":"any"},{"kind":"text","text":" "},{"preciseIdentifier":"s:6SQLKit13SQLExpressionP","text":"SQLExpression","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:6SQLKit16SQLUpdateBuilderC","text":"SQLUpdateBuilder","kind":"typeIdentifier"}],"abstract":[{"text":"Create a new ","type":"text"},{"identifier":"doc:\/\/sql-kit.SQLKit\/documentation\/SQLKit\/SQLUpdateBuilder","type":"reference","isActive":true},{"type":"text","text":" associated with this database."}],"identifier":"doc:\/\/sql-kit.SQLKit\/documentation\/SQLKit\/SQLDatabase\/update(_:)-80964"},"https://github.com/vapor/sqlite-kit":{"identifier":"https:\/\/github.com\/vapor\/sqlite-kit","url":"https:\/\/github.com\/vapor\/sqlite-kit","title":"SQLite driver","type":"link","titleInlineContent":[{"type":"text","text":"SQLite driver"}]},"doc://sql-kit.SQLKit/documentation/SQLKit/SQLQueryString/appendInterpolation(bind:)":{"abstract":[{"text":"Embed an ","type":"text"},{"type":"codeVoice","code":"Encodable"},{"text":" value as a binding in the SQL query.","type":"text"}],"fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"appendInterpolation","kind":"identifier"},{"text":"(","kind":"text"},{"text":"bind","kind":"externalParam"},{"kind":"text","text":": "},{"text":"any","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Encodable","preciseIdentifier":"s:SE","kind":"typeIdentifier"},{"text":" & ","kind":"text"},{"preciseIdentifier":"s:s8SendableP","text":"Sendable","kind":"typeIdentifier"},{"kind":"text","text":")"}],"title":"appendInterpolation(bind:)","kind":"symbol","role":"symbol","identifier":"doc:\/\/sql-kit.SQLKit\/documentation\/SQLKit\/SQLQueryString\/appendInterpolation(bind:)","type":"topic","url":"\/documentation\/sqlkit\/sqlquerystring\/appendinterpolation(bind:)"}}}